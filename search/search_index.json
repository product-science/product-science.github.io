{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#product-science-documentation","title":"Product Science Documentation","text":"<p>Product Science increases product metrics for mobile applications and helps apps work faster by providing insights into key performance issues that impact user experience.</p> <p>Product Science analyzes the code and actual runtime data to pinpoint performance issues. Our AI enables us to do it more efficiently by providing unique insights for data visualizations to help mobile developers to identify the problem right away.</p>"},{"location":"android/cicd/","title":"CICD Integration with Gradle","text":"<p>Product Science suggests two main approach for integration Gradle plugin in CICD. </p>"},{"location":"android/cicd/#build-variant","title":"Build Variant","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> <li>Build Variant docs</li> </ul> <p>This approach is based on Gradle build variant. A build variant <code>psiRelease</code> is created for instrumented version of the app.  PS Plugin is applied only for this build variant.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid 'com.android.application'\nid 'kotlin-android'\n}\n\napply plugin: \"com.productscience.transformer.plugin\" productScience {\npsiRelease {\nenabled true\n}\n}\n\nandroid {\ndefaultConfig { ... }\n\nbuildTypes {\nrelease {\n...\n}\n\npsiRelease {\n...\n}\n}\n}\n</code></pre> app/build.gradle<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\ncreate(\"psiRelease\") {\nisEnabled = true\n}\n}\n\nandroid {\n...\nbuildTypes {\ncreate(\"psiRelease\") {\n...\n}\n\ngetByName(\"debug\") {\n...\n}\n}\n}\n</code></pre> <p>Build can be triggered with gradle command: <pre><code>./gradlew assemblePsiRelease\n</code></pre></p>"},{"location":"android/cicd/#conditional-plugin-apply","title":"Conditional plugin apply","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> </ul> <p>This approach is based on conditional applying of gradle plugin. PS Plugin is applied only when the value of <code>USE_PSTOOL</code> environment variable is true.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid 'com.android.application'\nid 'kotlin-android'\n}\n\nif (System.getenv(\"USE_PSTOOL\")) {\napply plugin: \"com.productscience.transformer.plugin\" }\n</code></pre> <p>Build can be triggered with gradle command: <pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre></p> app/build.gradle<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\n\nval usePSPlugin: Boolean = System.getenv(\"USE_PSTOOL\").toBoolean()\nif (usePSPlugin) {\nid(\"com.productscience.transformer.plugin\")\n}\n}\n</code></pre> <p>Build can be triggered with gradle command: <pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre></p>"},{"location":"android/gradle/","title":"Gradle Build Instructions - Android","text":""},{"location":"android/gradle/#1-credentials","title":"1. Credentials","text":"<p>Product Science shared access credentials (<code>productscience.properties</code> file) via Bitwarden sent.  Please place it in the root directory of your project.</p> <p>The Product Science Android plugin is distributed as a public GitHub maven package.  It's publicly available but requires authentication with any github account.</p> <p>Please generate new token with read:packages access and setup <code>gradle.properties</code> in your home directory <code>~/.gradle/gradle.properties</code>.</p> ~/.gradle/gradle.properties<pre><code>github_user=&lt;Github Account&gt;\ngithub_key=&lt;Github Token&gt;\n</code></pre>"},{"location":"android/gradle/#2-add-product-science-maven-repository","title":"2. Add Product Science maven repository","text":"<p>In <code>build.gradle</code> add the maven build info to the repositories for project and subprojects:  </p> GroovyKotlin DSL build.gradle<pre><code>buildscript {\nrepositories {\nmaven {\nurl \"https://maven.pkg.github.com/product-science/PSAndroid\"\ncredentials {\nusername = github_user\npassword = github_key\n}\n}\n}\ndependencies { ... }\n}\n\nallprojects {\nrepositories {\nmaven {\nurl \"https://maven.pkg.github.com/product-science/PSAndroid\"\ncredentials {\nusername = github_user\npassword = github_key\n}\n}\n}\n}\n</code></pre> build.gradle.kts<pre><code>buildscript {\nrepositories {\nmaven {\nurl = uri(\"https://maven.pkg.github.com/product-science/PSAndroid\")\ncredentials {\nusername = System.getProperty(\"github_user\")\npassword = System.getProperty(\"github_key\")\n}\n}\n}\ndependencies { ... }\n}\n\nallprojects {\nrepositories {\nmaven {\nurl = uri(\"https://maven.pkg.github.com/product-science/PSAndroid\")\ncredentials {\nusername = System.getProperty(\"github_user\")\npassword = System.getProperty(\"github_key\")\n}\n}\n}\n}\n</code></pre> <p>If the project is configured to prefer settings repositories maven source should be added to settings file:</p> GroovyKotlin DSL settings.gradle<pre><code>...\ndependencyResolutionManagement {\nrepositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\nrepositories {\nmaven {\nurl \"https://maven.pkg.github.com/product-science/PSAndroid\"\ncredentials {\nusername = github_user\npassword = github_key\n}\n}\n}\n}\n</code></pre> settings.gradle.kts<pre><code>...\ndependencyResolutionManagement {\nrepositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\nrepositories {\nmaven {\nurl = uri(\"https://maven.pkg.github.com/product-science/PSAndroid\")\ncredentials {\nusername = System.getProperty(\"github_user\")\npassword = System.getProperty(\"github_key\")\n}\n}\n}\n}\n</code></pre> <p>In another case, if <code>allprojects</code> is not present in top level <code>build.gradle</code> then add it in the top of the file.  </p>"},{"location":"android/gradle/#3-add-product-science-plugin-to-classpath","title":"3. Add Product Science plugin to <code>classpath</code>","text":"GroovyKotlin DSL build.gradle<pre><code>buildscript {\nrepositories { ... }\ndependencies {\nclasspath \"com.productscience.transformer:transformer-plugin:0.16.2\"\nclasspath \"com.productscience.transformer:transformer-instrumentation:0.16.2\"\n}\n}\n...\n</code></pre> build.gradle.kts<pre><code>buildscript {\nrepositories { ... }\ndependencies {\nclasspath(\"com.productscience.transformer:transformer-plugin:0.16.2\")\nclasspath(\"com.productscience.transformer:transformer-instrumentation:0.16.2\")\n}\n}\n...\n</code></pre> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.apk</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"android/gradle/#4-apply-the-product-science-plugin","title":"4. Apply the Product Science Plugin","text":"<p>Apply plugin to <code>app/build.gradle</code> </p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid \"com.android.application\"\nid \"kotlin-android\"\n}\napply plugin: \"com.productscience.transformer.plugin\"\n...\n</code></pre> app/build.gradle.kts<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n...\n</code></pre>"},{"location":"android/gradle/#5-add-proguard-rules","title":"5. Add Proguard rules","text":"<p>If the application uses obfuscation/shrinking add a new ProGuard rule to your project. To achieve it add the next line to the R8/ProGuard configuration file: </p> proguard-rules.pro.<pre><code>-keep class com.productscience.transformer.module.** { *; }\n</code></pre> <p>Your project may use the other proguard file name.</p> <p>More information about R8/ProGuard configuration can be found here: https://developer.android.com/studio/build/shrink-code</p>"},{"location":"android/gradle/#6-build-your-app","title":"6. Build your app","text":"<p>Now you can build your app with Gradle, i.e.: <pre><code>./gradlew assemble\n</code></pre></p> <p>Please label your build with the Plugin Version from above i.e. <code>MyApp_PSi-0.14.2.apk</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"android/gradle/#enabling-the-plugin-by-build-type","title":"Enabling the plugin by build type","text":"<p>For plugin versions greater than 0.12.1,  you can integrate Product Science pipeline into your gradle build  selectively apply the plugin to a given build type by adding a <code>productScience</code> block  at the top level of your <code>app/build.gradle</code> file. </p> <p>Inside the proguard block, add a block corresponding to the build type (must have the same name) and set <code>enabled</code> to <code>true</code>.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid \"com.android.application\"\nid \"kotlin-android\"\n}\napply plugin: \"com.productscience.transformer.plugin\" productScience {\npsiRelease {\nenabled true\n}\n}\n\nandroid {\n...\nbuildTypes {\npsiRelease {\nminifyEnabled true\n}\nrelease {\nminifyEnabled true\n}\n}\n}\n</code></pre> app/build.gradle.kts<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\ncreate(\"psiRelease\") {\nisEnabled = true\n}\n}\n\nandroid {\n...\nbuildTypes {\ncreate(\"psiRelease\") {\nisMinifyEnabled = true\n}\n\ngetByName(\"release\") {\nisMinifyEnabled = true\n}\n}\n}\n</code></pre> <p>If the <code>productScience</code> block is missing or empty, the plugin will be applied to all build types. If one or more build types appear in the <code>productScience</code> block, the plugin will be applied only to those build types that have <code>enabled</code> set to true. </p>"},{"location":"android/user-flow/","title":"Manual Annotation for User Flows","text":"<p>In addition to automatically instrumenting your app, the Product Science SDK provides a <code>userflow</code> library that enables manual annotation of user flows in your code.  This can be useful for tracking and comparing timing changes between specific events across traces.</p> <p>The steps to add and use the library are below.</p>"},{"location":"android/user-flow/#dependencies","title":"Dependencies","text":"<p>Add the userflow library as a dependency in <code>app/build.gradle</code></p> <pre><code>    dependencies {\nimplementation \"com.productscience.userflow:userflow:0.15.1\"\n}\n</code></pre>"},{"location":"android/user-flow/#annotation-process","title":"Annotation Process","text":"<p>There are three static methods used to annotate user flows:</p> <ul> <li><code>UserFlow#start</code></li> <li><code>UserFlow#custom</code></li> <li><code>UserFlow#end</code></li> </ul> <p>Each of these methods take an integer argument (UserFlow ID) and a nullable String argument (comment).</p>"},{"location":"android/user-flow/#1-starting-a-userflow","title":"1. Starting a UserFlow","text":"<p>To start a UserFlow, call <code>UserFlow#start</code> and pass it an ID and a String message. <pre><code>    UserFlow.start(1, \"App start begins\")\n</code></pre></p>"},{"location":"android/user-flow/#2-annotations-userflows-milestones","title":"2. Annotations UserFlow's milestones","text":"<p>While a UserFlow is in progress, you can make calls to <code>UserFlow#custom</code> passing the UserFlow ID and a String message.  This can be useful to annotate events along the UserFlow (e.g., reaching a milestone or annotating different conditional paths among others). <pre><code>    UserFlow.custom(1, \"UserFlow hit milestone\")\n</code></pre></p>"},{"location":"android/user-flow/#3-ending-a-userflow","title":"3. Ending a UserFlow","text":"<p>To end a UserFlow, call <code>UserFlow#end</code> passing the ID of the UserFlow to end and a String message. <pre><code>    UserFlow.end(1, \"App start complete\")\n</code></pre></p>"},{"location":"android/user-flow/#examples","title":"Examples","text":""},{"location":"android/user-flow/#userflow-annotations-on-pstool","title":"UserFlow Annotations on PSTool","text":""},{"location":"android/user-flow/#sample-app","title":"Sample app","text":"<p>There is a sample app demonstrating the use of the userflow library at: https://github.com/product-science/demoapps-private/tree/main/Android/userflow-android-example</p>"},{"location":"android/user-flow/#project-integration","title":"Project Integration","text":"<p>By default, UserFlow Annotations are added to traces only when Product Science plugin is applied. To annotate user flows without applying the plugin, call <code>UserFlow#setAlwaysAnnotate(true)</code>.   </p> <p>CAUTION: using this method can enable unwanted annotations in production builds. You will have to take steps to ensure that UserFlow annotations are only called where appropriate.</p>"},{"location":"ios/xcode/","title":"iOS Build Instructions - Xcode","text":""},{"location":"ios/xcode/#1-key-generation-methodology-psi","title":"1. Key Generation Methodology- PSi:","text":"<ul> <li>Generates a token (key) via GitHub</li> <li>Saves key in Bitwarden credential storage</li> <li>Shares token with Bitwarden Send </li> <li>Keys have an expiration date</li> </ul> <p>This step is not needed if you use standalone build.</p>"},{"location":"ios/xcode/#2-configure-productscienceyaml","title":"2. Configure <code>productscience.yaml</code>","text":"<p>Set up <code>productscience.yaml</code> in the Xcode app project directory: <pre><code>productscience.github.config: &lt;supplied-by-PSi&gt;\nproductscience.github.token: &lt;supplied-by-PSi&gt;\nproductscience.token: &lt;supplied-by-PSi&gt;\n</code></pre></p> <p>example <code>productscience.yaml</code>:  </p> <pre><code>productscience.github.config: product-science-configs:ios-template-configs:config.yaml:main\nproductscience.github.token: ghp_XXXXXXXXXXXXXXX\nproductscience.token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre> <p>This step is not needed if you use standalone build.</p>"},{"location":"ios/xcode/#3-configure-and-test-xcodebuild","title":"3. Configure and Test <code>xcodebuild</code>","text":"<p>Prepare an <code>xcodebuild</code> command to build the app in terminal.  </p> <p>For projects that are organized with <code>xcworkspace</code>: </p> <pre><code>xcodebuild \\\n-workspace MyApp.xcworkspace \\\n-scheme MyAppScheme \\\n-sdk iphoneos\n</code></pre> <p>For <code>xcodeproj</code> based projects:  </p> <p><pre><code>xcodebuild \\\n-project MyApp.xcodeproj \\\n-scheme MyAppScheme \\\n-sdk iphoneos\n</code></pre> Ensure that your app can build successfully before using the <code>PSCliCodeInjector</code>. A reference example using the Firefox Fennec iOS app is shown below.</p>"},{"location":"ios/xcode/#4-install-pstools-instrumentation-injection-kit","title":"4. Install <code>PSTools</code> Instrumentation Injection Kit","text":"<p>You will need to use the github credentials supplied by PSi to above to follow these steps:</p> <ol> <li>Download the latest PSTools-PLATFORM.zip from this link and unzip it  </li> <li>Install PSTools/PSCliCodeInjector.pkg on your Mac with double-click  </li> <li>Copy PSTools/PSKit to ps-workdir i.e. <code>cp -r PSTools/PSKit .</code></li> </ol> <p>See the Firefox example below for sample final directory structure.</p> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.ipa</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"ios/xcode/#5-build","title":"5. Build","text":"<ul> <li> <p>Ensure that the <code>PSKit</code> tool folder is at the same folder level as your project i.e.: <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 MyApp\n</code></pre></p> </li> <li> <p>Run PSTool code transformation and configuration fine-tuning. The <code>PSCliCodeInjector</code> command must be run at the folder level above where the <code>.xcodeproj</code> sits and run against that folder. For example, if the project is <code>./MyApp/MyApp.xcodeproj</code> then from the <code>.</code> level folder run: <pre><code>PSCliCodeInjector MyApp \\\n--backup-dir MyApp-BACKUP \\\n--sub-folders=. \\\n--console-build-command=\"&lt;BUILD-COMMAND-FROM_STEP-3&gt;\"\n</code></pre></p> </li> </ul> <p>This step transforms the code of within the <code>MyApp</code> project folder. A backup of the original <code>./MyApp</code> will be created at the same folder level where injection is run i.e. <code>./MyApp-BACKUP</code>.</p> <p>The BUILD-COMMAND-FROM_STEP-2 is the choice between the xcworkspace or xcodeproj methods and their associated flags. These are examples of xcodebuild templates- yours may differ. See the Firefox app example below.</p> <p>\u26a0\ufe0f Warning: PSCliCodeInjector parses the command\u2019s output to identify issues with the injected code. Be sure not to pipe the build\u2019s results through tools like xcbeautify, xcpretty, etc. or this logic might not work correctly.</p> <p>When complete, the <code>MyApp</code> directory will have been transformed. Use this directory for your build.</p> <ul> <li>Open project from <code>MyApp</code> directory</li> <li>Build and export the app in your default pipeline.</li> <li>Send us MyApp/psfilter.txt if it exists</li> </ul> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.ipa</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"ios/xcode/#example-firefox-for-ios","title":"Example: Firefox for iOS","text":""},{"location":"ios/xcode/#1-clone-firefox-ios-repo","title":"1. Clone Firefox iOS repo","text":"<pre><code>git clone https://github.com/mozilla-mobile/firefox-ios\n</code></pre>"},{"location":"ios/xcode/#2-configure-and-test-xcodebuild","title":"2. Configure and test <code>xcodebuild</code>","text":"<p>In the <code>firefox-ios</code> directory</p> <pre><code>xcodebuild \\\n-project Client.xcodeproj \\\n-scheme Fennec \\\n-destination 'name=iPhone 13 mini' \\\n-sdk iphoneos\n</code></pre> <p>Note this example uses <code>iPhone 13 mini</code> as the example destination- this can be changed.</p>"},{"location":"ios/xcode/#3-create-creds-and-install-pstools","title":"3. Create Creds and install PStools","text":"<p>Create the <code>productscience.yaml</code> file in the <code>firefox-ios</code> directory as shown in Step 2 above.</p> <p>Download, unzip, and install <code>PStools</code> as shown in Step 4 above.</p> <p>Make sure that the <code>PSKit</code> is in the same top level directory level as <code>firefox-ios</code>: <pre><code>cp -r PSTools/PSKit .\n</code></pre>  i.e.</p> <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\n</code></pre> <p>If you use standalone put <code>productscience.zip</code> archive in project directory.</p>"},{"location":"ios/xcode/#4-build-with-psclicodeinjector","title":"4. Build with <code>PSCliCodeInjector</code>","text":"<p>This is done in the same directory level as the <code>firefox-ios</code> directory i.e. the same one as shown above- NOT IN the <code>firefox-ios</code> directory:</p> <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\n</code></pre> <pre><code>PSCliCodeInjector firefox-ios --backup-dir firefox-ios-BACKUP \\\n--sub-folders=. \\\n--console-build-command=\\\n\"xcodebuild \\\n          -project Client.xcodeproj \\\n          -scheme Fennec \\\n          -destination 'name=iPhone 13 mini' \\\n          -sdk iphoneos\"\n</code></pre> <p>When complete, the <code>firefox-ios</code> directory will have been transformed. <code>firefox-ios-BACKUP</code> is a directory with original project. <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\ndrwxr-xr-x  77 user  staff      2464 Jul 12 16:46 firefox-ios-BACKUP\n</code></pre></p> <p>Use <code>firefox-ios</code> for your pipeline or Xcode.</p>"}]}