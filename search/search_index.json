{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#product-science-documentation","title":"Product Science Documentation","text":"<p>Product Science increases product metrics for mobile applications and helps apps work faster by providing insights into key performance issues that impact user experience.</p> <p>Product Science analyzes the code and actual runtime data to pinpoint performance issues. Our AI enables us to do it more efficiently by providing unique insights for data visualizations to help mobile developers to identify the problem right away.</p>"},{"location":"android/cicd/","title":"CICD / Gradle","text":""},{"location":"android/cicd/#cicd-integration-with-gradle","title":"CICD Integration with Gradle","text":"<p>Product Science suggests two main approach for integration Gradle plugin in CICD. </p>"},{"location":"android/cicd/#build-variant","title":"Build Variant","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> <li>Build Variant docs</li> </ul> <p>This approach is based on Gradle build variant. A build variant <code>psiRelease</code> is created for instrumented version of the app.  PS Plugin is applied only for this build variant.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid 'com.android.application'\nid 'kotlin-android'\n}\n\napply plugin: \"com.productscience.transformer.plugin\" productScience {\npsiRelease {\nenabled true\n}\n}\n\nandroid {\ndefaultConfig { ... }\n\nbuildTypes {\nrelease {\n...\n}\n\npsiRelease {\n...\n}\n}\n}\n</code></pre> app/build.gradle<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\ncreate(\"psiRelease\") {\nisEnabled = true\n}\n}\n\nandroid {\n...\nbuildTypes {\ncreate(\"psiRelease\") {\n...\n}\n\ngetByName(\"debug\") {\n...\n}\n}\n}\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>./gradlew assemblePsiRelease\n</code></pre>"},{"location":"android/cicd/#conditional-plugin-apply","title":"Conditional plugin apply","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> </ul> <p>This approach is based on conditional applying of gradle plugin. PS Plugin is applied only when the value of <code>USE_PSTOOL</code> environment variable is true.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid 'com.android.application'\nid 'kotlin-android'\n}\n\nif (System.getenv(\"USE_PSTOOL\")) {\napply plugin: \"com.productscience.transformer.plugin\" }\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre> app/build.gradle<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\n\nval usePSPlugin: Boolean = System.getenv(\"USE_PSTOOL\").toBoolean()\nif (usePSPlugin) {\nid(\"com.productscience.transformer.plugin\")\n}\n}\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre>"},{"location":"android/cli-tool/","title":"CLI Tool Integration Instructions - Android","text":""},{"location":"android/cli-tool/#cli-tool-integration-instructions-android","title":"CLI Tool Integration Instructions - Android","text":""},{"location":"android/cli-tool/#1-gradle-setup","title":"1. Gradle Setup","text":"<p>First follow Gradle Instructions up to step 6: Build your app (this will be used after integration) to setup build environment</p>"},{"location":"android/cli-tool/#2-clean-build-directory-and-run-jar","title":"2. Clean Build Directory and Run .jar","text":"<p>integration-cli is a CLI on top of Gradle which automates integration with the PS Plugin by receiving your regular gradle build command as input. Please use flag --stacktrace together with gradle command.</p>"},{"location":"android/cli-tool/#1-we-recommend-cleaning-your-project-before-starting","title":"1. We recommend cleaning your project before starting:","text":"<pre><code>rm -rf ./**/build\n./gradlew clean\n</code></pre>"},{"location":"android/cli-tool/#2-run-the-jar-with-your-normal-gradle-command","title":"2. Run the jar with your normal Gradle command.","text":"<p>Example: If you build the project with <code>./gradlew assembleRelease</code> your integration-cli command will look like: </p><pre><code>java -jar integration-cli-0.16.28.jar \"./gradlew assembleRelease --stacktrace\"\n</code></pre>"},{"location":"android/cli-tool/#3-share-apk-and-ps-output-directory","title":"3. Share .apk and ps-output Directory","text":"<p>Upload to Google Drive (or sharing service of your choice) and share with us</p>"},{"location":"android/gradle/","title":"Build / Gradle","text":""},{"location":"android/gradle/#gradle-build-instructions-android","title":"Gradle Build Instructions - Android","text":""},{"location":"android/gradle/#1-credentials","title":"1. Credentials","text":"<p>Product Science shared access credentials (<code>productscience.properties</code> file) via Bitwarden sent.  Please place it in the root directory of your project.</p>"},{"location":"android/gradle/#2-add-product-science-maven-repository","title":"2. Add Product Science maven repository","text":"<p>In <code>build.gradle</code> add the maven build info to the repositories for project and subprojects:  </p> GroovyKotlin DSL build.gradle<pre><code>buildscript {\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\ndependencies { ... }\n}\n\nallprojects {\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\n}\n</code></pre> build.gradle.kts<pre><code>buildscript {\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\ndependencies { ... }\n}\n\nallprojects {\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\n}\n</code></pre> <p>If the project is configured to prefer settings repositories maven source should be added to settings file:</p> GroovyKotlin DSL settings.gradle<pre><code>...\ndependencyResolutionManagement {\nrepositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\n}\n</code></pre> settings.gradle.kts<pre><code>...\ndependencyResolutionManagement {\nrepositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\nrepositories {\nmaven {\nurl \"https://artifactory.productscience.app/releases\"\n}\n}\n}\n</code></pre> <p>In another case, if <code>allprojects</code> is not present in top level <code>build.gradle</code> then add it in the top of the file.  </p>"},{"location":"android/gradle/#3-add-product-science-plugin-to-classpath","title":"3. Add Product Science plugin to <code>classpath</code>","text":"GroovyKotlin DSL build.gradle<pre><code>buildscript {\nrepositories { ... }\ndependencies {\nclasspath \"com.productscience.transformer:transformer-plugin:0.16.28\"\nclasspath \"com.productscience.transformer:transformer-instrumentation:0.16.28\"\n}\n}\n...\n</code></pre> build.gradle.kts<pre><code>buildscript {\nrepositories { ... }\ndependencies {\nclasspath(\"com.productscience.transformer:transformer-plugin:0.16.28\")\nclasspath(\"com.productscience.transformer:transformer-instrumentation:0.16.28\")\n}\n}\n...\n</code></pre> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.apk</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"android/gradle/#4-apply-the-product-science-plugin","title":"4. Apply the Product Science Plugin","text":"<p>Apply plugin to <code>app/build.gradle</code> </p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid \"com.android.application\"\nid \"kotlin-android\"\n}\napply plugin: \"com.productscience.transformer.plugin\"\n...\n</code></pre> app/build.gradle.kts<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n...\n</code></pre>"},{"location":"android/gradle/#5-add-proguard-rules","title":"5. Add Proguard rules","text":"<p>If the application uses obfuscation/shrinking add a new ProGuard rule to your project. To achieve it add the next line to the R8/ProGuard configuration file: </p> proguard-rules.pro.<pre><code>-keep class com.productscience.transformer.module.** { *; }\n</code></pre> <p>Your project may use the other proguard file name.</p> <p>More information about R8/ProGuard configuration can be found here: https://developer.android.com/studio/build/shrink-code</p>"},{"location":"android/gradle/#6-build-your-app","title":"6. Build your app","text":"<p>Now you can build your app with Gradle, i.e.: </p><pre><code>./gradlew assemble\n</code></pre> <p>Please label your build with the Plugin Version from above i.e. <code>MyApp_PSi-0.14.2.apk</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"android/gradle/#enabling-the-plugin-by-build-type","title":"Enabling the plugin by build type","text":"<p>For plugin versions greater than 0.12.1,  you can integrate Product Science pipeline into your gradle build  selectively apply the plugin to a given build type by adding a <code>productScience</code> block  at the top level of your <code>app/build.gradle</code> file. </p> <p>Inside the proguard block, add a block corresponding to the build type (must have the same name) and set <code>enabled</code> to <code>true</code>.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\nid \"com.android.application\"\nid \"kotlin-android\"\n}\napply plugin: \"com.productscience.transformer.plugin\" productScience {\npsiRelease {\nenabled true\n}\n}\n\nandroid {\n...\nbuildTypes {\npsiRelease {\nminifyEnabled true\n}\nrelease {\nminifyEnabled true\n}\n}\n}\n</code></pre> app/build.gradle.kts<pre><code>plugins {\nid(\"com.android.application\")\nid(\"kotlin-android\")\nid(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\ncreate(\"psiRelease\") {\nisEnabled = true\n}\n}\n\nandroid {\n...\nbuildTypes {\ncreate(\"psiRelease\") {\nisMinifyEnabled = true\n}\n\ngetByName(\"release\") {\nisMinifyEnabled = true\n}\n}\n}\n</code></pre> <p>If the <code>productScience</code> block is missing or empty, the plugin will be applied to all build types. If one or more build types appear in the <code>productScience</code> block, the plugin will be applied only to those build types that have <code>enabled</code> set to true. </p>"},{"location":"android/user-flow/","title":"User Flow Annotation","text":""},{"location":"android/user-flow/#manual-annotation-for-user-flows","title":"Manual Annotation for User Flows","text":"<p>In addition to automatically instrumenting your app, the Product Science SDK provides a <code>userflow</code> library that enables manual annotation of user flows in your code.  This can be useful for tracking and comparing timing changes between specific events across traces.</p> <p>The steps to add and use the library are below.</p>"},{"location":"android/user-flow/#dependencies","title":"Dependencies","text":"<p>Add the userflow library as a dependency in <code>app/build.gradle</code></p> <pre><code>    dependencies {\nimplementation \"com.productscience.userflow:userflow:0.16.28\"\n}\n</code></pre>"},{"location":"android/user-flow/#annotation-process","title":"Annotation Process","text":"<p>There are three static methods used to annotate user flows:</p> <ul> <li><code>UserFlow#start</code></li> <li><code>UserFlow#custom</code></li> <li><code>UserFlow#end</code></li> </ul> <p>Each of these methods take an integer argument (UserFlow ID) and a nullable String argument (comment).</p>"},{"location":"android/user-flow/#1-starting-a-userflow","title":"1. Starting a UserFlow","text":"<p>To start a UserFlow, call <code>UserFlow#start</code> and pass it an ID and a String message. </p><pre><code>    UserFlow.start(1, \"App start begins\")\n</code></pre>"},{"location":"android/user-flow/#2-annotations-userflows-milestones","title":"2. Annotations UserFlow's milestones","text":"<p>While a UserFlow is in progress, you can make calls to <code>UserFlow#custom</code> passing the UserFlow ID and a String message.  This can be useful to annotate events along the UserFlow (e.g., reaching a milestone or annotating different conditional paths among others). </p><pre><code>    UserFlow.custom(1, \"UserFlow hit milestone\")\n</code></pre>"},{"location":"android/user-flow/#3-ending-a-userflow","title":"3. Ending a UserFlow","text":"<p>To end a UserFlow, call <code>UserFlow#end</code> passing the ID of the UserFlow to end and a String message. </p><pre><code>    UserFlow.end(1, \"App start complete\")\n</code></pre>"},{"location":"android/user-flow/#examples","title":"Examples","text":""},{"location":"android/user-flow/#userflow-annotations-on-pstool","title":"UserFlow Annotations on PSTool","text":""},{"location":"android/user-flow/#sample-app","title":"Sample app","text":"<p>There is a sample app demonstrating the use of the userflow library at: https://github.com/product-science/demoapps-private/tree/main/Android/userflow-android-example</p>"},{"location":"android/user-flow/#project-integration","title":"Project Integration","text":"<p>By default, UserFlow Annotations are added to traces only when Product Science plugin is applied. To annotate user flows without applying the plugin, call <code>UserFlow#setAlwaysAnnotate(true)</code>.   </p> <p>CAUTION: using this method can enable unwanted annotations in production builds. You will have to take steps to ensure that UserFlow annotations are only called where appropriate.</p>"},{"location":"ios/bazel/","title":"Build / Bazel","text":""},{"location":"ios/bazel/#ios-build-instructions-bazel","title":"iOS Build Instructions - Bazel","text":"<p>The following instructions describe how to add Product Science instrumentation to a Bazel project's iOS application.</p> <p>Example</p> <p>Several of this document's steps include an \"Example\" section that describes how to apply the instructions to a demo Bazel application named SimpleApp. If you'd like to follow along, just clone our demoapps repository:</p> <pre><code>% cd ~\n% git clone https://github.com/product-science/demoapps\n</code></pre> <p>Our examples will assume that you've cloned the repository to your home directory and kept the repository's default directory name (<code>demoapps</code>). If you decide to change either of these details, then modify the specified paths to fit your setup.</p>"},{"location":"ios/bazel/#1-copy-productscienceyaml-to-your-projects-workspace-directory","title":"1. Copy <code>productscience.yaml</code> to your project's workspace directory","text":"<p>Product Science will provide you with a <code>productscience.yaml</code> file that contains your credentials and configuration details.</p> <p>Info</p> <p>If you haven't received this file or need to request a new copy, please reach out to your designated integration support contact via email or Slack. If this contact is unavailable, send an email to support@productscience.ai for assistance.</p> <p>Once you've received your <code>productscience.yaml</code> file, copy the file to your project's workspace directory (next to the <code>WORKSPACE</code> file).</p> Example <p>Assuming you've downloaded <code>productscience.yaml</code> to your <code>~/Downloads</code> directory:</p> <pre><code>% cp ~/Downloads/productscience.yaml ~/demoapps/iOS/SimpleApp-Bazel\n\n% ls -go ~/demoapps/iOS/SimpleApp-Bazel\n...\n-rw-r--r--  1    819 May 11 2023 WORKSPACE\n-rw-r--r--  1   3619 May 12 2023 productscience.yaml\n...\n</code></pre>"},{"location":"ios/bazel/#2-install-buildozer","title":"2. Install <code>buildozer</code>","text":"<p><code>buildozer</code> is a build tool created and maintained by the Bazel team to rewrite <code>BUILD</code> files. <code>PSCliCodeInjector</code> uses this tool to configure your project's <code>BUILD</code> files during injection.</p> <p>Before running <code>PSCliCodeInjector</code> for the first time, you'll need to install <code>buildozer</code> on the host computer. Instructions for installation can be found on the project's repository.</p>"},{"location":"ios/bazel/#3-install-psclicodeinjector","title":"3. Install <code>PSCliCodeInjector</code>","text":"<p>Download the latest installer package (named <code>PSCliCodeInjector.pkg</code>) from our public plugin repo.</p> <p>Double-click the downloaded <code>.pkg</code> to start the installation process. By default, <code>PSCliCodeInjector</code> will be installed to <code>/usr/local/bin</code>.</p> <p></p>"},{"location":"ios/bazel/#4-run-psclicodeinjector","title":"4. Run <code>PSCliCodeInjector</code>","text":"<p><code>PSCliCodeInjector</code> adds Product Science's instrumentation to your project's source code.</p> <p>Before any changes are made to your project, <code>PSCliCodeInjector</code> will create a copy of your project's directory and save it to a backup location. <code>PSCliCodeInjector</code> will then add Product Science's instrumentation to your workspace directory's source code. The backup directory will contain the original, un-instrumented code.</p> <p>Important</p> <p>When you want to create an instrumented build, be sure to use the original project directory and not the backup directory.</p>"},{"location":"ios/bazel/#basic-use","title":"Basic use","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n--console-build-command \"&lt;console-build-command&gt;\"\n</code></pre> <p>There are only two required parameters when running <code>PSCliCodeInjector</code>:</p> <ol> <li><code>root-directory</code>: This is the path to your project's workspace directory. There must be a Bazel <code>WORKSPACE</code> file at the top level of this directory.</li> <li><code>console-build-command</code>: This is the build command that the tool will use to confirm that your project compiles successfully before and after injection. This command will be run from your project's workspace directory.</li> </ol> Example <p>Assuming that you've cloned the demoapps repository to <code>~/demoapps</code>, the full path to your <code>root-directory</code> (aka your workspace directory) will be <code>~/demoapps/iOS/SimpleApp-Bazel</code>.</p> <p>Product Science does not currently support the iOS Simulator as a run destination, so the app will need to be built for device. To build for device, you'll first need to configure the app's code-siging settings. Perform the following steps:</p> <ol> <li>Copy a valid provisioning profile to <code>~/demoapps/iOS/SimpleApp-Bazel/ios-app/configuration/</code>. Rename the provisioning profile to <code>SimpleApp.mobileprovision</code>.</li> <li>Run the following command, replacing <code>&lt;YOUR_BUNDLE_ID&gt;</code> with a bundle identifier that will work with your copied provisioning profile.</li> </ol> <pre><code>echo \"BUNDLE_ID = \\\"&lt;YOUR_BUNDLE_ID&gt;\\\"\" &gt;&gt; ~/demoapps/iOS/SimpleApp-Bazel/ios-app/configuration/codesign.bzl\n</code></pre> <p>Once that's done, the following will be your <code>console-build-command</code>:   </p><pre><code>bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\n</code></pre> <p>Given the information above, your full <code>PSCliCodeInjector</code> command will be:</p> <pre><code>% PSCliCodeInjector ~/demoapps/iOS/SimpleApp-Bazel \\\n--console-build-command=\"bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\"\n</code></pre> <p>Run this command and wait for the tool to finish its work. When done, several of the files inside <code>~/demoapps/iOS/SimpleApp-Bazel</code> will have uncommitted changes. You can see an overview of the changes using git:</p> <pre><code>% git -C ~/demoapps status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\nmodified:   iOS/SimpleApp-Bazel/ios-app/BUILD\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/AppDelegate.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/FirstViewController.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/SceneDelegate.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/SecondViewController.swift\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\niOS/SimpleApp-Bazel-BACKUP/\n        iOS/SimpleApp-Bazel/PSKit/\n        iOS/SimpleApp-Bazel/productscience.yaml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Five existing files have been modified. There are also three untracked items - the <code>productscience.yaml</code> file that you added earlier, along with two new directories:</p> <ul> <li><code>iOS/SimpleApp-Bazel-BACKUP/</code> is a snapshot of <code>iOS/SimpleApp-Bazel/</code>, created before any changes are made to the contents of <code>iOS/SimpleApp-Bazel/</code>. By default, the backup directory is named <code>&lt;root-directory&gt;-BACKUP</code> and added as a sibling directory of the original. You can change this behavior using the <code>--backup-dir</code> option (see \"Changing the backup directory\" below).</li> <li><code>iOS/SimpleApp-Bazel/PSKit/</code> is Product Science's framework package, responsible for tracing the app's code. An example of its use can be found in<code>iOS/SimpleApp-Bazel/ios-app/BUILD</code>, where it is added as a dependency of SimpleAppLib.</li> </ul> <p>At this point, you should be able to install the app to your iOS device and record a trace.</p> <p>To install the app:</p> <p>The .ipa can be found at <code>~/demoapps/iOS/SimpleApp-Bazel/bazel-out/applebin_ios-ios_arm64-fastbuild-ST-9204ac8255b1/bin/ios-app/SimpleApp.ipa</code>. If you have ios-deploy on your host computer, you can install this .ipa to your device from the command line:</p> <pre><code>% ios-deploy --bundle ~/demoapps/iOS/SimpleApp-Bazel/bazel-out/applebin_ios-ios_arm64-fastbuild-ST-9204ac8255b1/bin/ios-app/SimpleApp.ipa\n</code></pre> <p>If you'd prefer, you can also install the app from Xcode's \"Devices and Simulators\" window.</p> <p>To record a trace:</p> <p></p>"},{"location":"ios/bazel/#changing-the-backup-directory","title":"Changing the backup directory","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n--console-build-command \"&lt;console-build-command&gt;\" \\\n--backup-dir &lt;backup-directory&gt;\n</code></pre> <p>A backup of your project's root directory will be created before injection is run. By default, this backup directory is created at  <code>&lt;root-directory&gt;-BACKUP</code>.</p> <p>You can override the location of the backup directory by including the <code>--backup-dir</code> option with a custom directory path.</p> Example <p>You're about to re-run injection on the SimpleApp-Bazel workspace, and <code>PSCliCodeInjector</code> doesn't currently support modifications to already-injected code. Before continuing, revert the changes from previous examples that you made to the <code>SimpleApp-Bazel</code> directory:</p> <pre><code>% git -C ~/demoapps/iOS/SimpleApp-Bazel/ add .\n% git -C ~/demoapps/iOS/SimpleApp-Bazel/ reset --hard HEAD\n</code></pre> <p>You're also about to specify a custom backup directory so, to avoid confusion, delete the previously-created backup directory:</p> <pre><code>% rm -r ~/demoapps/iOS/SimpleApp-Bazel-BACKUP/\n</code></pre> <p>The local <code>~/demoapps</code> working tree should now be clean. You can confirm by checking its git status:</p> <pre><code>% git -C ~/demoapps/iOS/SimpleApp-Bazel/ status\nOn branch main\nnothing to commit, working tree clean\n</code></pre> <p>We've discarded the <code>productscience.yaml</code> file, so we'll need to re-copy it to the workspace directory:</p> <pre><code>% cp ~/Downloads/productscience.yaml ~/demoapps/iOS/SimpleApp-Bazel\n\n% ls -go ~/demoapps/iOS/SimpleApp-Bazel\n...\n-rw-r--r--  1    819 May 11 2023 WORKSPACE\n-rw-r--r--  1   3619 May 12 2023 productscience.yaml\n...\n</code></pre> <p>Let's run <code>PSCliCodeInjector</code> on the SimpleApp-Bazel workspace again, but this time we'll save the backup directory to the <code>/tmp</code> directory. Let's also rename the backup directory to something a bit shorter (<code>SimpleAppBackup</code>). Your new <code>backup-directory</code> will be <code>/tmp/SimpleAppBackup</code>, and your new <code>PSCliCodeInjector</code> command will be:</p> <pre><code>% PSCliCodeInjector ~/demoapps/iOS/SimpleApp-Bazel \\\n--console-build-command \"bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\" \\\n--backup-dir /tmp/SimpleAppBackup\n</code></pre> <p>Run this command and wait for the tool to finish its work. When done, the changes should almost match those that you saw after finishing the previous examples. The only difference will be that <code>~/demoapps/iOS/SimpleApp-Bazel-BACKUP/</code> no longer shows up in that directory's <code>git status</code>. Instead, you can find the backup directory at <code>/tmp/SimpleAppBackup</code>:</p> <pre><code>% ls -go /tmp/SimpleAppBackup/\ntotal 16\n-rw-r--r--  1   819 May 16 19:50 WORKSPACE\n...\n</code></pre>"},{"location":"ios/bazel/#other-options","title":"Other options","text":"<p><code>PSCliCodeInjector</code> accepts several other options. Pass the <code>--help</code> flag to see the full list:</p> <pre><code>PSCliCodeInjector --help\n</code></pre>"},{"location":"ios/bazel/#5-share-build-with-product-science","title":"5. Share build with Product Science","text":"<p>Please follow instructions at iOS Distribution Instructions to share your build with us.</p>"},{"location":"ios/distribution/","title":"App Distribution","text":""},{"location":"ios/distribution/#ios-application-distribution-instructions","title":"iOS Application Distribution Instructions","text":"<p>iOS applications are distributed as IPA archives. To export application it must be signed with some Apple Development Team certificate.</p>"},{"location":"ios/distribution/#option-1-testflight","title":"Option 1: TestFlight","text":"<p>TestFlight is the default Apple tool for beta testing: https://developer.apple.com/testflight/</p>"},{"location":"ios/distribution/#distribution-process","title":"Distribution Process","text":"<ol> <li>PS: Send employee emails</li> <li>Client: Build PS-injected app and upload it in TestFlight</li> <li>Client: Invite Product Science emails as testers for uploaded app</li> </ol>"},{"location":"ios/distribution/#option-2-ad-hoc-ipa","title":"Option 2: Ad-Hoc IPA","text":"<p>App can be distributed directly as IPA with two options for signing</p>"},{"location":"ios/distribution/#distribution-process_1","title":"Distribution Process","text":"<ol> <li>Client: Build PS-injected app and export it as Ad-Hoc</li> <li>Client: Send exported IPA to PS</li> </ol> How to export app as ad-hoc in XCode Product \u2192 Archive     Window \u2192 Organizer   Distribute App \u2192 Ad-Hoc"},{"location":"ios/distribution/#signing-options","title":"Signing Options","text":""},{"location":"ios/distribution/#best-option-add-ps-devices-to-apple-development-account","title":"Best Option: Add PS Devices to Apple Development Account","text":"<p>App can be distributed directly as IPA and installed on device if device\u2019s UUID is added to Apple Development account.</p> <ol> <li>PS: Send employee devices UUIDs</li> <li>Client: Add device to company\u2019s devices list: https://developer.apple.com/account/resources/devices/list</li> </ol> <p>Limitations: Apple Development allows only 100 added devices simultaneously. </p>"},{"location":"ios/distribution/#risky-option-re-signing-ipa-after-build","title":"Risky Option: Re-Signing IPA After Build","text":"<p>In most cases an IPA can be re-signed with another Apple Development account after build, but this process is not guaranteed to work. We don\u2019t recommend to use it.</p>"},{"location":"ios/xcode/","title":"Build / Xcode","text":""},{"location":"ios/xcode/#ios-build-instructions-xcode","title":"iOS Build Instructions - Xcode","text":""},{"location":"ios/xcode/#1-configure-productscienceyaml","title":"1. Configure <code>productscience.yaml</code>","text":"<p>Put this file into root of build directory</p> <p>This step is not needed if you use standalone build.</p>"},{"location":"ios/xcode/#2-configure-and-test-xcodebuild","title":"2. Configure and Test <code>xcodebuild</code>","text":"<p>Prepare an <code>xcodebuild</code> command to build the app in terminal.  </p> <p>For projects that are organized with <code>xcworkspace</code>: </p> <pre><code>xcodebuild \\\n-workspace MyApp.xcworkspace \\\n-scheme MyAppScheme \\\n-sdk iphoneos\n</code></pre> <p>For <code>xcodeproj</code> based projects:  </p> <p></p><pre><code>xcodebuild \\\n-project MyApp.xcodeproj \\\n-scheme MyAppScheme \\\n-sdk iphoneos\n</code></pre> Ensure that your app can build successfully before using the <code>PSCliCodeInjector</code>. A reference example using the Firefox Fennec iOS app is shown below."},{"location":"ios/xcode/#3-install-pstools-instrumentation-injection-kit","title":"3. Install <code>PSTools</code> Instrumentation Injection Kit","text":"<p>You will need to use the github credentials supplied by PSi to above to follow these steps:</p> <ol> <li>Download the latest PSTools-PLATFORM.zip from our public plugin repo and unzip it  </li> <li>Install PSTools/PSCliCodeInjector.pkg on your Mac with double-click  </li> <li>Copy PSTools/PSKit to ps-workdir i.e. <code>cp -r PSTools/PSKit .</code></li> </ol> <p>See the Firefox example below for sample final directory structure.</p> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.ipa</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"ios/xcode/#4-build","title":"4. Build","text":"<ul> <li> <p>Ensure that the <code>PSKit</code> tool folder is at the same folder level as your project i.e.: </p><pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 MyApp\n</code></pre> </li> <li> <p>Run PSTool code transformation and configuration fine-tuning. The <code>PSCliCodeInjector</code> command must be run at the folder level above where the <code>.xcodeproj</code> sits and run against that folder. For example, if the project is <code>./MyApp/MyApp.xcodeproj</code> then from the <code>.</code> level folder run: </p><pre><code>PSCliCodeInjector MyApp \\\n--backup-dir MyApp-BACKUP \\\n--sub-folders=. \\\n--console-build-command=\"&lt;BUILD-COMMAND-FROM_STEP-3&gt;\"\n</code></pre> </li> </ul> <p>This step transforms the code of within the <code>MyApp</code> project folder. A backup of the original <code>./MyApp</code> will be created at the same folder level where injection is run i.e. <code>./MyApp-BACKUP</code>.</p> <p>The BUILD-COMMAND-FROM_STEP-2 is the choice between the xcworkspace or xcodeproj methods and their associated flags. These are examples of xcodebuild templates- yours may differ. See the Firefox app example below.</p> <p>\u26a0\ufe0f Warning: PSCliCodeInjector parses the command\u2019s output to identify issues with the injected code. Be sure not to pipe the build\u2019s results through tools like xcbeautify, xcpretty, etc. or this logic might not work correctly.</p> <p>When complete, the <code>MyApp</code> directory will have been transformed. Use this directory for your build.</p> <ul> <li>Open project from <code>MyApp</code> directory</li> <li>Build and export the app in your default pipeline.</li> <li>Send us MyApp/psfilter.txt if it exists</li> </ul> <p>Please label your build with the PSi Plugin Version from above i.e. <code>MyAppPSi0.9.1.ipa</code> so our AI can learn how its dynamic instrumentation is performing on the build.</p>"},{"location":"ios/xcode/#5-distribute-build","title":"5. Distribute Build","text":"<p>Please follow instructions at iOS Distribution Instructions to share your build with us</p>"},{"location":"ios/xcode/#example-firefox-for-ios","title":"Example: Firefox for iOS","text":""},{"location":"ios/xcode/#1-clone-firefox-ios-repo","title":"1. Clone Firefox iOS repo","text":"<pre><code>git clone https://github.com/mozilla-mobile/firefox-ios\n</code></pre>"},{"location":"ios/xcode/#2-configure-and-test-xcodebuild_1","title":"2. Configure and test <code>xcodebuild</code>","text":"<p>In the <code>firefox-ios</code> directory</p> <pre><code>xcodebuild \\\n-project Client.xcodeproj \\\n-scheme Fennec \\\n-destination 'name=iPhone 13 mini' \\\n-sdk iphoneos\n</code></pre> <p>Note this example uses <code>iPhone 13 mini</code> as the example destination- this can be changed.</p>"},{"location":"ios/xcode/#3-create-creds-and-install-pstools","title":"3. Create Creds and install PStools","text":"<p>Create the <code>productscience.yaml</code> file in the <code>firefox-ios</code> directory as shown in Step 2 above.</p> <p>Download, unzip, and install <code>PStools</code> as shown in Step 4 above.</p> <p>Make sure that the <code>PSKit</code> is in the same top level directory level as <code>firefox-ios</code>: </p><pre><code>cp -r PSTools/PSKit .\n</code></pre>  i.e. <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\n</code></pre> <p>If you use standalone put <code>productscience.zip</code> archive in project directory.</p>"},{"location":"ios/xcode/#4-build-with-psclicodeinjector","title":"4. Build with <code>PSCliCodeInjector</code>","text":"<p>This is done in the same directory level as the <code>firefox-ios</code> directory i.e. the same one as shown above- NOT IN the <code>firefox-ios</code> directory:</p> <pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\n</code></pre> <pre><code>PSCliCodeInjector firefox-ios --backup-dir firefox-ios-BACKUP \\\n--sub-folders=. \\\n--console-build-command=\\\n\"xcodebuild \\\n          -project Client.xcodeproj \\\n          -scheme Fennec \\\n          -destination 'name=iPhone 13 mini' \\\n          -sdk iphoneos\"\n</code></pre> <p>When complete, the <code>firefox-ios</code> directory will have been transformed. <code>firefox-ios-BACKUP</code> is a directory with original project. </p><pre><code>drwxr-xr-x@  5 user  staff       160 Jul 12 16:24 PSKit\ndrwxr-xr-x@  6 user  staff       192 Jul  5 10:22 PSTools\ndrwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\ndrwxr-xr-x  77 user  staff      2464 Jul 12 16:46 firefox-ios-BACKUP\n</code></pre> <p>Use <code>firefox-ios</code> for your pipeline or Xcode.</p>"}]}