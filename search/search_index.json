{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#product-science-documentation","title":"Product Science Documentation","text":"<p>Product Science develops tools that enhance software performance and efficiency by uncovering and addressing inefficiencies at the code level. We analyze the code and actual runtime data to pinpoint performance issues. Our AI enables us to do it more efficiently by providing unique insights for data visualizations to help developers identify the problem right away.</p>"},{"location":"#explore-documentation-for-our-products","title":"Explore documentation for our products","text":"<p>CodeTuner for Cloud</p> <p>CodeTuner for Mobile</p> <p>Regression Analysis for Mobile</p>"},{"location":"cloud/overview/","title":"Overview","text":""},{"location":"cloud/overview/#codetuner-for-cloud","title":"CodeTuner for Cloud","text":"<p>CodeTuner for Cloud by Product Science is a new cloud cost optimization  tool that provides unparalleled visibility into your cloud costs down  to the cost of a single function. Traditional cloud cost optimization  tools have fallen short in addressing the complexities of cloud  environments. However, CodeTuner for Cloud\u2019s function-level view  offers a groundbreaking solution. By analyzing code-level events,  CodeTuner provides insight into resource utilization and spending patterns. </p> <p></p> <p>CodeTuner for Cloud's granular approach enables businesses to prioritize optimization efforts with precision, while its intuitive trace viewer ensures optimization without compromising user experience. CodeTuner transcends the limitations of traditional tools, empowering businesses to navigate cloud economics with confidence and clarity and making cost efficiency in the cloud more achievable than ever before.</p> <p></p>"},{"location":"cloud/overview/#insrtuctions-for-using-codetuner-for-cloud","title":"Insrtuctions for using CodeTuner for Cloud","text":"<ul> <li>Integration instructions can be found here.</li> <li>Usage instructions can be found here.</li> </ul>"},{"location":"cloud/overview/#release-notes","title":"Release notes","text":"<p>Our release notes can be found here.</p>"},{"location":"cloud/usage/","title":"Usage","text":""},{"location":"cloud/usage/#usage","title":"Usage","text":""},{"location":"cloud/usage/#detect-expensive-api","title":"Detect expensive API","text":"<p>The Dashboard Screen provides a consolidated view of CPU  and Storage usage, along with traffic and activity.  Below the main dashboards, you'll find a detailed breakdown of  these metrics for each API. </p> <p></p> <p>For each API call, you can see a breakdown by Direct and Indirect calls.  Direct calls are the code synchronously execute during API request, while Indirect calls  represent all side effects as asyncrously executed methods.  Additionally, you can view specific  user sessions related to each API call, helping you understand the context  of the resource usage.</p> <p></p> <p>By leveraging this high-level overview of your cloud resource consumption,  you can quickly identify the most resource-intensive APIs and take action  to optimize them.</p>"},{"location":"cloud/usage/#analyze-as-part-of-a-user-session","title":"Analyze as part of a user session","text":"<p>For each API, you can select specific user sessions where the API was called.  This provides valuable insights into the sequence and context of API calls.</p> <p></p> <p>When you open a particular user session, you\u2019ll see details of all API calls  within that session.</p> <p></p> <p>The User Session screen offers a detailed overview of each session. For a  deeper dive and more granular insights, check out the trace view in the  next section.</p>"},{"location":"cloud/usage/#analyze-trace","title":"Analyze trace","text":"<p>The Trace View provides a detailed recording of each user session, capturing  all direct and indirect API calls, and highlighting any dependencies between them.  To open a trace, click on the \"View session in trace\" button of the  User Session screen.  This comprehensive view helps you understand the full context of API  interactions and resource usage.</p> <p></p> <p>By examining the trace file, you can identify specific points where performance  can be optimized. You'll see how different calls interact, any dependencies  causing delays, and where resource consumption spikes. This can help uncover  hidden costs and unexpected behaviors that is not apparent from the  high-level overview.</p> <p></p> <p>With this deep dive into the trace data, you can make informed decisions to  fine-tune your APIs and improve overall performance, ultimately reducing  your cloud costs.</p>"},{"location":"cloud/integration/integration/","title":"Common","text":""},{"location":"cloud/integration/integration/#integration-of-codetuner-for-cloud","title":"Integration of CodeTuner for Cloud","text":"<p>The following instructions describe the integration process for CodeTuner for Cloud with your backend application.</p>"},{"location":"cloud/integration/integration/#architecture","title":"Architecture","text":"<p>CodeTuner for Cloud is an agent that connects to your working application,  providing low-overhead runtime instrumentation to track the cost of interactions with the server.  The agent sends data to the Control Panel, which stores and processes the data.</p> <p>The Control Panel, a part of CodeTuner, stores data from agents, processes it, and manages the agent's configuration.  The data is available for analysis in the CodeTuner UI.</p> <p>Info</p> <p>By default, CodeTuner and the Control Panel are hosted on Product Science servers.  If your company's security rules do not allow sending data outside of the private network,  CodeTuner and the Control Panel are available for on-premises distribution. Please contact the Product Science Team for more details.</p>"},{"location":"cloud/integration/integration/#running-your-application","title":"Running Your Application","text":"<p>Run your application as usual.  The agent will be attached to the already running application.  Make sure to save the process ID to attach the agent.</p>"},{"location":"cloud/integration/integration/#attach-agent-to-the-apps-process","title":"Attach Agent to the app's process","text":"<p>The Product Science Team will provide you with the Control Panel URL and a security token for communication between the agent and the Control Panel.</p> <p>When attaching the agent, you need to configure three parameters:</p> <ol> <li> <p><code>PS_CONTROL_PANEL_URL</code> - - The URL for the Control Panel, provided by Product Science.</p> </li> <li> <p><code>PS_AGENT_APPLICATION_API_KEY</code> - The security token, provided by Product Science.</p> </li> <li> <p><code>PS_AGENT_APPLICATION_NAME</code> - The name of your application.</p> </li> </ol> <p>Then, run the JAR file <code>code-tuner-agent.jar</code> with the following command:</p> <pre><code>java -jar code-tuner-agent.jar \\\n    --pid &lt;PROCESS_ID&gt; \\\n    --control-panel-url &lt;PS_CONTROL_PANEL_URL&gt; \\\n    --token &lt;PS_AGENT_APPLICATION_API_KEY&gt; \\\n    --app-name &lt;PS_AGENT_APPLICATION_NAME&gt;\n</code></pre> <p>If you need to analyze several instances, the agent should be attached to all of them.  The same URL, application name, and token can be used for each instance.</p>"},{"location":"cloud/integration/integration/#configuration","title":"Configuration","text":"<p>All further CodeTuner configuration will be done automatically based on your application's static and dynamic analysis.</p>"},{"location":"cloud/integration/jvm-agent/","title":"JVM Agent","text":""},{"location":"cloud/integration/jvm-agent/#integration-for-jvm-based-app","title":"Integration for JVM based app","text":"<p>The JVM Agent allows both dynamic attaching to an already running JVM application and  starting the application with the Agent attached.</p>"},{"location":"cloud/integration/jvm-agent/#attaching-the-agent-to-a-running-jvm-application","title":"Attaching the Agent to a Running JVM Application","text":"<p>Attaching the Agent is described on the integration page.  Run your application as usual, then attach the CodeTuner Agent using the following command:</p> <pre><code>java -jar code-tuner-agent.jar \\\n    --pid &lt;PROCESS_ID&gt; \\\n    --control-panel-url &lt;PS_CONTROL_PANEL_URL&gt; \\\n    --token &lt;PS_AGENT_APPLICATION_API_KEY&gt; \\\n    --app-name &lt;PS_AGENT_APPLICATION_NAME&gt;\n</code></pre>"},{"location":"cloud/integration/jvm-agent/#running-the-application-with-the-agent-attached","title":"Running the Application with the Agent Attached","text":"<p>To attach the agent at startup, follow these steps:</p>"},{"location":"cloud/integration/jvm-agent/#1-set-environment-variables","title":"1. Set environment variables","text":"<ol> <li> <p><code>PS_CONTROL_PANEL_URL</code> - - The URL for the Control Panel, provided by Product Science.</p> </li> <li> <p><code>PS_AGENT_APPLICATION_API_KEY</code> - The security token, provided by Product Science.</p> </li> <li> <p><code>PS_AGENT_APPLICATION_NAME</code> - The name of your application.</p> </li> </ol>"},{"location":"cloud/integration/jvm-agent/#2-modify-command-to-run-the-app","title":"2. Modify command to run the app","text":"<p>Typically, you run the application with a command like this:</p> <pre><code>java -jar myapp.jar\n</code></pre> <p>To attach CodeTuner Agent command should be modified to: </p><pre><code>java \\\n    -javaagent:code-tuner-agent.jar\n    -jar myapp.jar\n</code></pre> <p>If you need to analyze several instances, the agent should be attached to all of them.  The same URL, application name, and token can be used for each instance.</p>"},{"location":"cloud/release-notes/release-note-1/","title":"Supported JAVA frameworks","text":""},{"location":"cloud/release-notes/release-note-1/#supported-java-frameworks","title":"Supported JAVA frameworks","text":"<p>CodeTuner for Cloud now supports Micronaut, Spring Boot,  and Dropwizard frameworks. This new integration allows developers  to apply CodeTuner\u2019s advanced cloud cost optimization features directly  to applications built with these popular Java frameworks, providing deeper  insights and more precise cost management at the code level.</p>"},{"location":"cloud/release-notes/release-note-1/#user-instructions","title":"User Instructions:","text":"<ul> <li>Refer to the JVM Agent Integration Documentation for detailed setup instructions to get started. This guide will help you integrate CodeTuner with Micronaut, Spring Boot, or Dropwizard and fully leverage the cost optimization features.</li> <li>Follow the instructions to integrate CodeTuner for Cloud with your backend application.</li> </ul>"},{"location":"mobile/overview/","title":"Overview","text":""},{"location":"mobile/overview/#codetuner-for-mobile","title":"CodeTuner for Mobile","text":"<p>CodeTuner for Mobile  increases product metrics for mobile applications and  helps apps work faster by providing insights into key  performance issues that impact user experience.</p> <p>CodeTuner for Mobile analyzes the code and actual runtime data to pinpoint  performance issues. Our AI enables us to do it more  efficiently by providing unique insights for data  visualizations to help mobile developers to identify  the problem right away.</p>"},{"location":"mobile/overview/#insrtuctions-for-using-codetuner-for-mobile","title":"Insrtuctions for using CodeTuner for Mobile","text":"<ul> <li>Integration for Android and iOS</li> <li>Device set-up for Android and iOS</li> <li>Recording and Uploading for Android and iOS</li> </ul>"},{"location":"mobile/overview/#release-notes","title":"Release notes","text":"<p>Our release notes can be found here.</p>"},{"location":"mobile/device-set-up/android/","title":"Android","text":""},{"location":"mobile/device-set-up/android/#android-device-setup","title":"Android Device Setup","text":"<p>To record a trace, let\u2019s first get you set up.</p> <p>These preparatory steps only need to be once.</p>"},{"location":"mobile/device-set-up/android/#1-install-ps-companion-app","title":"1. Install PS Companion app","text":"<p>You will use PS Companion app later to upload traces and screen recordings to PS Tool.</p>"},{"location":"mobile/device-set-up/android/#2-log-in-with-your-ps-tool-credentials","title":"2. Log in with your PS Tool credentials","text":"<p>To login to PS Companion app, you can use the same credentials you created while registering at productscience.app or use Google authentication.</p> <p>Click here if you forgot your credentials.</p> <p>Click here if you don't have an account yet.</p>"},{"location":"mobile/device-set-up/android/#3-make-sure-tracing-is-enabled","title":"3. Make sure tracing is enabled","text":"<p>Individual phones may have different ways to do this, but these are general guidelines. Please review these settings even if you are familiar with trace recording on Android devices, there are some specific settings.</p> <p>For complete documentation, see the Official Android Documentation.</p>"},{"location":"mobile/device-set-up/android/#enable-developer-options-and-usb-debugging","title":"Enable developer options and USB debugging","text":"<ul> <li>Settings &gt; About phone &gt; Software information &gt; Build number</li> <li>Tap the Build number option 7 times</li> </ul>"},{"location":"mobile/device-set-up/android/#enable-tracing-and-adjust-corresponding-settings","title":"Enable tracing and adjust corresponding settings","text":"<ul> <li>Settings &gt; System &gt; Developer options &gt; Debugging section &gt; System Tracing</li> <li>Make sure to turn off all options in Categories except 'sched: CPU Scheduling' and 'view: View System' </li> </ul> <ul> <li>Set Per-CPU buffer size to maximum</li> <li>Enable Long traces</li> <li>Enable Show Quick Settings tile - this will add the Record Trace tile to the Quick Settings panel</li> </ul>"},{"location":"mobile/device-set-up/android/#4-make-sure-that-you-have-screen-recording-at-hand","title":"4. Make sure that you have Screen Recording at hand","text":"<p>Source Google</p> <ul> <li>Swipe down twice from the top of your screen to reveal Quick Settings tiles</li> <li>You might need to swipe right to find Screen Recorder</li> <li>If it's not there, tap 'Edit buttons' and drag Screen Recorder to your Quick Settings. 'Edit buttons' can be accessed using the 'More Options' button in the upper right corner of the screen.</li> <li>If you don't have the built in screen recorder, we recommend you to download 3rd party apps such as Screen Recorder - XRecorder</li> </ul>"},{"location":"mobile/device-set-up/ios/","title":"iOS","text":""},{"location":"mobile/device-set-up/ios/#ios-device-setup","title":"iOS Device Setup","text":"<p>To record a trace, let\u2019s first get you set up.</p> <p>These preparatory steps only need to be once.</p>"},{"location":"mobile/device-set-up/ios/#1-install-ps-companion-app","title":"1. Install PS Companion app","text":"<p>You will use PS Companion app later to upload traces and screen recordings to PS Tool. Additionally, when recording app start, PS Companion app will be the place to start trace recording.</p>"},{"location":"mobile/device-set-up/ios/#2-login-with-your-ps-tool-credentials","title":"2. Login with your PS Tool credentials","text":"<p>To login to PS Companion app, you can use the same credentials you created while registering at productscience.app or use Google authentication.</p> <p>Click here if you forgot your credentials.</p> <p>Click here if you don't have an account yet.</p>"},{"location":"mobile/device-set-up/ios/#3-customize-share-sheet","title":"3. Customize share sheet","text":"<p>To make it easier to upload your traces via PS Companion app, we recommend customizing your\u00a0iPhone share sheet.</p> <p>To complete this step, you can choose any file on your iPhone that can be shared or return to this step when uploading your first trace.</p> <ul> <li>Tap the icon</li> </ul> <p></p> <ul> <li>Once share sheet appears, look for PS Companion app among sharing options</li> <li>If PS Companion App is not shown, swipe all the way to the right and tap \"More\"</li> </ul> <p></p> <ul> <li>On the top right tap \"Edit\"</li> <li>Tap the add button  next to PS Companion app</li> </ul>"},{"location":"mobile/device-set-up/ios/#4-make-sure-that-screen-recording-is-added-to-control-center","title":"4. Make sure that Screen Recording is added to Control Center","text":"<p>Source:\u00a0Apple</p> <p>Go to Settings &gt; Control Center, then tap the add button \u00a0next to Screen Recording.</p>"},{"location":"mobile/integration/upload-api/","title":"Upload API","text":""},{"location":"mobile/integration/upload-api/#upload-api","title":"Upload API","text":""},{"location":"mobile/integration/upload-api/#overview","title":"Overview","text":"<p>This page describes the HTTP API for uploading instrumented builds to the Product Science Tool.</p>"},{"location":"mobile/integration/upload-api/#http-api","title":"HTTP API","text":"<p>Host:         <code>productscience.app</code> Protocol:     <code>HTTPS</code> Content type: <code>application/json</code> Charset:      <code>utf-8</code></p> <p>To access the API endpoints, you must supply your <code>productscience.token</code> from the <code>productscience.properties</code> or (<code>productscience.yaml</code>) file as an Authorization header. For instance: </p> <pre><code>Authorization: Bearer {YOUR_TOKEN}\n</code></pre>"},{"location":"mobile/integration/upload-api/#api","title":"API","text":""},{"location":"mobile/integration/upload-api/#1-submit-build-metadata-and-obtain-upload-url","title":"1. Submit build metadata and obtain upload URL","text":"<p>Call this endpoint when your build file is ready.</p>"},{"location":"mobile/integration/upload-api/#request","title":"Request","text":"<pre><code>POST /api/v1/projects/{projectName}/builds\n</code></pre> <p>JSON body with parameters:</p> <ul> <li><code>buildType</code> (required) \u2013 <code>INSTRUMENTED_APK</code> (for iOS also)</li> <li><code>buildFileName</code> (required) \u2013 file name, e.g. <code>app-play-release.apk</code> </li> <li><code>name</code> \u2013 arbitrary name to distinguish the build, e.g. <code>release-5.2.8</code></li> <li><code>description</code> \u2013 arbitrary build description</li> <li><code>sourceControlId</code> \u2013 VCS commit, e.g. git commit hash</li> <li><code>sourceControlIsoTimestamp</code> \u2013 VCS commit timestamp in ISO 8601 format. To retrieve the timestamp in Git, you can use the following shell command: <code>git show -s --format='%cI' &lt;commit-hash&gt;</code></li> </ul> <p>Example:</p> <pre><code>{\n  \"contextId\": \"28\",\n  \"buildType\": \"APK\",\n  \"buildFileName\": \"app-play-release.apk\",\n  \"name\": \"v5.2.8\",\n  \"description\": \"Arbitrary description\",\n  \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n  \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\"\n}\n</code></pre>"},{"location":"mobile/integration/upload-api/#response","title":"Response","text":"<p>JSON body with parameters:</p> <ul> <li><code>uploadSpec</code> (required) \u2013 metadata to upload build to a storage<ul> <li><code>method</code> (required) \u2013 HTTP method</li> <li><code>url</code> (required) \u2013 URL</li> <li><code>headers</code> (required) \u2013 map of HTTP headers</li> </ul> </li> <li><code>build</code> (required) \u2013 build metadata<ul> <li><code>id</code> (required) \u2013 build ID number</li> <li><code>contextId</code> (required) \u2013 upload context ID obtained in step 1</li> <li><code>buildType</code> (required) \u2013 <code>INSTRUMENTED_APK</code></li> <li><code>buildFileName</code> (required) \u2013 file name, e.g. <code>app-play-release.apk</code></li> <li><code>name</code> \u2013 arbitrary name to distinguish the build, e.g. <code>release-5.2.8</code></li> <li><code>description</code> \u2013 arbitrary build description</li> <li><code>sourceControlId</code> \u2013 VCS commit, e.g. git commit hash</li> <li><code>sourceControlIsoTimestamp</code> \u2013 VCS commit timestamp in ISO 8601 format</li> <li><code>uploadState</code> \u2013 <code>UPLOADING</code> or <code>FINISHED</code> or <code>FAILED</code></li> <li><code>dateCreated</code> \u2013 build creation timestamp </li> </ul> </li> </ul> <p>Example:</p> <pre><code>{\n  \"uploadSpec\": {\n    \"method\": \"PUT\",\n    \"url\": \"https://storage.googleapis.com/some/path?someParams=someValue\",\n    \"headers\": {\n      \"Content-Type\": \"application/octet-stream\",\n      \"X-Goog-Content-Length-Range\": \"0,1073741824\"\n    }\n  },\n  \"build\": {\n    \"id\": 70,\n    \"contextId\": 28,\n    \"buildType\": \"INSTRUMENTED_APK\",\n    \"buildFileName\": \"app-play-release.apk\",\n    \"name\": \"v5.2.8\",\n    \"description\": \"Arbitrary description\",\n    \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n    \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n    \"dateCreated\": \"2024-03-08T14:13:33.143Z\",\n    \"uploadState\": \"UPLOADING\"\n  }\n}\n</code></pre>"},{"location":"mobile/integration/upload-api/#2-upload-file-to-the-obtained-url","title":"2. Upload file to the obtained URL","text":"<p>Use <code>uploadSpec</code> object from the previous response to upload a file as <code>application/octet-stream</code>.</p> <pre><code>{uploadSpec.method} {uploadSpec.url}\n{uploadSpec.hearder1}: {uploadSpec.header1Value}\n{uploadSpec.hearder2}: {uploadSpec.header2Value}\nContent-Length: {YOUR_FILE_LENGTH}\n\n{YOUR_FILE_BINARY_DATA}\n</code></pre>"},{"location":"mobile/integration/upload-api/#curl-example","title":"cURL example","text":""},{"location":"mobile/integration/upload-api/#1-submit-build-metadata-and-obtain-upload-url_1","title":"1. Submit build metadata and obtain upload URL","text":"<p>Request: </p> <pre><code>curl -X \"POST\" \"https://test.productscience.app/api/v1/projects/{projectName}/builds\" \\\n     -H 'Authorization: Bearer {YOUR_TOKEN}' \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n  \"buildType\": \"INSTRUMENTED_APK\",\n  \"buildFileName\": \"app-play-release.apk\",\n  \"name\": \"v5.2.8\"\n  \"description\": \"Arbitrary description\",\n  \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n  \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n}'\n</code></pre> <p>Response:</p> <p></p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 1430\n</code></pre> <pre><code>{\n  \"uploadSpec\": {\n    \"method\": \"PUT\",\n    \"url\": \"https://storage.googleapis.com/some/path?someParams=someValue\",\n    \"headers\": {\n      \"Content-Type\": \"application/octet-stream\",\n      \"X-Goog-Content-Length-Range\": \"0,1073741824\"\n    }\n  },\n  \"build\": {\n    \"id\": 70,\n    \"contextId\": 28,\n    \"buildType\": \"INSTRUMENTED_APK\",\n    \"buildFileName\": \"app-play-release.apk\",\n    \"name\": \"v5.2.8\",\n    \"description\": \"Arbitrary description\",\n    \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n    \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n    \"dateCreated\": \"2024-03-08T14:13:33.143Z\",\n    \"uploadState\": \"UPLOADING\"\n  }\n}\n</code></pre>"},{"location":"mobile/integration/upload-api/#2-upload-file-to-the-obtained-url_1","title":"2. Upload file to the obtained URL","text":"<p>Request: </p> <pre><code>curl -X \"PUT\" \"https://storage.googleapis.com/some/path?someParams=someValue\" \\\n     -H 'Content-Type: application/octet-stream' \\\n     -H 'X-Goog-Content-Length-Range: 0,1073741824' \\\n     --data-binary \"@{FILE_PATH}\"\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Length: 0\n</code></pre>"},{"location":"mobile/integration/android/cicd/","title":"CICD / Gradle","text":""},{"location":"mobile/integration/android/cicd/#cicd-integration-with-gradle","title":"CICD Integration with Gradle","text":"<p>Product Science suggests two main approach for integration Gradle plugin in CICD. </p>"},{"location":"mobile/integration/android/cicd/#build-variant","title":"Build Variant","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> <li>Build Variant docs</li> </ul> <p>This approach is based on Gradle build variant. A build variant <code>psiRelease</code> is created for instrumented version of the app.  PS Plugin is applied only for this build variant.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n\napply plugin: \"com.productscience.transformer.plugin\" \n\nproductScience {\n    psiRelease {\n        enabled true\n    }\n}\n\nandroid {\n    defaultConfig { ... }\n\n    buildTypes {\n        release {\n            ...\n        }\n\n        psiRelease {\n            ...\n        }\n    }\n}\n</code></pre> app/build.gradle<pre><code>plugins {\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n    id(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\n    create(\"psiRelease\") {\n        isEnabled = true\n    }\n}\n\nandroid {\n    ...\n    buildTypes {\n        create(\"psiRelease\") {\n            ...\n        }\n\n        getByName(\"debug\") {\n            ...\n        }\n    }\n}\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>./gradlew assemblePsiRelease\n</code></pre>"},{"location":"mobile/integration/android/cicd/#conditional-plugin-apply","title":"Conditional plugin apply","text":"<ul> <li>Example App</li> <li>Example GitHub workflow</li> </ul> <p>This approach is based on conditional applying of gradle plugin. PS Plugin is applied only when the value of <code>USE_PSTOOL</code> environment variable is true.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n}\n\nif (System.getenv(\"USE_PSTOOL\")) {\n    apply plugin: \"com.productscience.transformer.plugin\" \n}\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre> app/build.gradle<pre><code>plugins {\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n\n    val usePSPlugin: Boolean = System.getenv(\"USE_PSTOOL\").toBoolean()\n    if (usePSPlugin) {\n        id(\"com.productscience.transformer.plugin\")\n    }\n}\n</code></pre> <p>Build can be triggered with gradle command: </p><pre><code>USE_PSTOOL=true ./gradlew assembleRelease\n</code></pre>"},{"location":"mobile/integration/android/cli-tool/","title":"CLI Tool","text":""},{"location":"mobile/integration/android/cli-tool/#cli-tool-integration-instructions-android","title":"CLI Tool Integration Instructions - Android","text":"<p>The CLI tool is a small wrapper around gradlew build command that reads build output and filters unsupported classes in Product Science instrumentation. It will build the specified release in a loop until successful.</p>"},{"location":"mobile/integration/android/cli-tool/#1-gradle-setup","title":"1. Gradle Setup","text":"<p>First follow Gradle Instructions up to step 6: Build your app (this will be used after integration) to setup build environment</p>"},{"location":"mobile/integration/android/cli-tool/#2-download-cli-tool","title":"2. Download CLI Tool","text":"<p>Download the CLI tool .jar from our Artifactory: Download here</p>"},{"location":"mobile/integration/android/cli-tool/#3-clean-build-directory-and-run-jar","title":"3. Clean Build Directory and Run .jar","text":"<p>integration-cli is a CLI on top of Gradle which automates integration with the PS Plugin by receiving your regular gradle build command as input. Please use flag --stacktrace together with gradle command.</p>"},{"location":"mobile/integration/android/cli-tool/#1-we-recommend-cleaning-your-project-before-starting","title":"1. We recommend cleaning your project before starting:","text":"<pre><code>rm -rf ./**/build\n./gradlew clean\n</code></pre>"},{"location":"mobile/integration/android/cli-tool/#2-run-the-jar-with-your-normal-gradle-command","title":"2. Run the jar with your normal Gradle command.","text":"<p>Example: If you build the project with <code>./gradlew assembleRelease</code> your integration-cli command will look like: </p><pre><code>java -jar integration-cli.jar \"./gradlew assembleRelease --stacktrace\"\n</code></pre>"},{"location":"mobile/integration/android/cli-tool/#4-share-apk-and-ps-output-directory","title":"4. Share .apk and ps-output Directory","text":"<p>Upload to Google Drive (or sharing service of your choice) and share with us</p>"},{"location":"mobile/integration/android/gradle/","title":"Build / Gradle","text":""},{"location":"mobile/integration/android/gradle/#gradle-build-instructions-android","title":"Gradle Build Instructions - Android","text":"<p>Follow these steps to instrument your Java/Kotlin Android app with PS Plugin. Once you have successfully built, installed and run the app, you will be able to record and analyze traces.</p> <p>If you get stuck, please refer to our FAQ for  additional steps and guidance, or reach out to customer support.</p> <p>Info</p> <p>If your build environment does not allow network access to our servers <code>https://prod.productscience.app/api/v1/*</code>,  please add to your allowlist. If your network settings prevent adding this endpoint,  please reach out to our sales team or customer support.</p>"},{"location":"mobile/integration/android/gradle/#1-identify-the-two-levels-of-files","title":"1. Identify the two levels of files","text":"<p>You will be working with and modifying files at two levels:</p> <ol> <li> <p>The root directory. This is the root directory of your Android project.  If your repository is entirely your Android project, it will usually be the top-level folder.  The <code>build.gradle</code> (or <code>build.gradle.kts</code>) file at this level is usuall fairly terse,  defining a few global dependencies and repositories.</p> </li> <li> <p>The app directory. This is the folder that actually builds your Android app.  It is often, though not always, named <code>app</code>. The <code>build.gradle</code> file at this level is usually more verbose,  containing all the dependencies and settings needed to build your Android app.</p> </li> </ol>"},{"location":"mobile/integration/android/gradle/#2-locate-credentials","title":"2. Locate credentials","text":"<p>If you are an existing Product Science user, credentials have been shared with you via one of the following options:</p> <ul> <li>BitWarden as the productscience.properties file</li> <li>As part of self-served onboarding found here </li> </ul> <p>Place the productscience.properties file containing your credentials in the root directory of your project.</p> <p>Info</p> <p>If your build environment does not allow network access to our servers as specified above,  you will be provided with a 'productscience.config.N.zip' archive instead of a .properties file. Copy the entire .zip archive to your workspace directory (do not unzip the archive).</p>"},{"location":"mobile/integration/android/gradle/#3-add-product-science-maven-repository-for-the-build","title":"3. Add Product Science maven repository for the build","text":"<p>In the root level <code>build.gradle</code> (or <code>build.gradle.kts</code>) file,  add the <code>productscience</code> maven url  to the <code>repositories</code> block inside of the <code>buildscript</code> block.  If you do not have a <code>buildscript</code> block in the file, you can add one at the top-level of the <code>build.gradle</code> file.</p> GroovyKotlin DSL build.gradle<pre><code>    buildscript {\n        repositories {\n            ...\n            maven {\n                url \"https://artifactory.productscience.app/releases\"\n            }\n        }\n        dependencies { ... }\n    }\n</code></pre> build.gradle.kts<pre><code>    buildscript {\n        repositories {\n            ...\n            maven {\n                url = uri(\"https://artifactory.productscience.app/releases\")\n            }\n        }\n        dependencies { ... }\n    }\n</code></pre>"},{"location":"mobile/integration/android/gradle/#4-add-product-science-maven-repository-to-all-modules","title":"4. Add Product Science maven repository to all modules","text":"<p>In your root directory, the project either defines module dependencies in the <code>build.gradle</code> file or   the <code>settings.gradle</code> file.  Look in both files to see where it is defined.</p>"},{"location":"mobile/integration/android/gradle/#case-1-your-project-defines-module-dependencies-in-an-allprojects-block-in-the-root-buildgradle-file","title":"Case 1: Your project defines module dependencies in an allprojects block in the root build.gradle file","text":"<p>Add the repository url to the <code>allprojects</code> block in the root <code>build.gradle</code> file.</p> GroovyKotlin DSL build.gradle<pre><code>    allprojects {\n        repositories {\n            ...\n            maven {\n                url \"https://artifactory.productscience.app/releases\"\n            }\n        }\n    }\n</code></pre> build.gradle.kts<pre><code>    allprojects {\n        repositories {\n            ...\n            maven {\n                url = uri(\"https://artifactory.productscience.app/releases\")\n            }\n        }\n    }\n</code></pre> <p>If there is no <code>allprojects</code> block in the root <code>build.gradle</code> file, you can add it at the top-level of the file.</p>"},{"location":"mobile/integration/android/gradle/#case-2-your-project-uses-settingsgradle-to-specify-module-dependencies-requires-gradle-68-or-later","title":"Case 2: Your project uses settings.gradle to specify module dependencies (requires gradle 6.8 or later)","text":"<p>The <code>productscience</code> plugin will attempt to instrument all modules of the app,  so it is necessary to provide a repository url for all modules.  To do this, add the <code>productscience</code> maven repository url to the <code>dependencyResolutionManagement</code> block of <code>settings.gradle</code>.  If there is no such block, you can add it at the top-level.</p> GroovyKotlin DSL settings.gradle<pre><code>    dependencyResolutionManagement {\n        ...\n        repositories {\n            ...\n            maven {\n                url \"https://artifactory.productscience.app/releases\"\n            }\n        }\n    }\n</code></pre> settings.gradle.kts<pre><code>    ...\n    dependencyResolutionManagement {\n        ...\n        repositories {\n            ...\n            maven {\n                url = uri(\"https://artifactory.productscience.app/releases\")\n            }\n        }\n    }\n</code></pre> <p>Note: If you use <code>RepositoriesMode.FAIL_ON_PROJECT_REPOS</code> mode, you may experience a failure when one or more  modules define their own repositories in their <code>build.gradle</code> files.  Switching the mode to <code>RepositoriesMode.PREFER_SETTINGS</code> may solve this problem.  Alternatively, you can add the <code>productscience</code> maven repository url to the <code>build.gradle</code> files of those modules.  You can also use the method defined above in Case 1 instead of defining them in <code>settings.gradle</code>.</p>"},{"location":"mobile/integration/android/gradle/#5-add-product-science-plugin-to-classpath","title":"5. Add Product Science plugin to classpath","text":"<p>In the <code>buildscript</code> block of the root <code>build.gradle</code> file, add the classpaths for the <code>transformer-plugin</code>  and <code>transformer-instrumentation</code> artifacts:</p> GroovyKotlin DSL build.gradle<pre><code>    buildscript {\n        repositories { ... }\n        dependencies {\n            ...\n            classpath \"com.productscience.transformer:transformer-plugin:0.18.18\"\n            classpath \"com.productscience.transformer:transformer-instrumentation:0.18.18\"\n        }\n    }\n    ...\n</code></pre> build.gradle.kts<pre><code>    buildscript {\n        repositories { ... }\n        dependencies {\n            ...\n            classpath(\"com.productscience.transformer:transformer-plugin:0.18.18\")\n            classpath(\"com.productscience.transformer:transformer-instrumentation:0.18.18\")\n        }\n    }\n    ...\n</code></pre>"},{"location":"mobile/integration/android/gradle/#6-apply-the-product-science-plugin","title":"6. Apply the Product Science plugin","text":"<p>Now you need to enable the plugin in your app <code>build.gradle</code> file. </p> GroovyKotlin DSL app/build.gradle<pre><code>    plugins {\n        ...\n        id \"com.android.application\"\n    }\n    apply plugin: \"com.productscience.transformer.plugin\"\n    ...\n</code></pre> app/build.gradle.kts<pre><code>    plugins {\n        ...\n        id(\"com.android.application\")\n        id(\"com.productscience.transformer.plugin\")\n    }\n    ...\n</code></pre>"},{"location":"mobile/integration/android/gradle/#7-add-proguard-rules","title":"7. Add ProGuard rules","text":"<p>If the application uses obfuscation/shrinking via ProGuard,  insert a new ProGuard rule to your project by adding the next line to the R8/ProGuard configuration file:</p> <pre><code>-keep class com.productscience.transformer.module.** { *; }\n-keep class com.productscience.** { *; }\n</code></pre> <p>Note: Your project may use a different ProGuard file name.</p> <p>More information about R8/ProGuard configuration can be found here. </p>"},{"location":"mobile/integration/android/gradle/#8-build-your-app","title":"8. Build your app","text":"<p>Now you can build your app with Gradle, i.e.: </p><pre><code>./gradlew assemble\n</code></pre> <p>Once your app is successfully built, you're all set to record and analyze traces!  For first-time setup, follow our Device Set-Up Guide.  If you've already completed  setup, proceed directly to Recording &amp; Uploading Instructions for ongoing analysis.</p>"},{"location":"mobile/integration/android/gradle/#optional-enable-the-plugin-by-build-type","title":"[Optional] Enable the plugin by build type","text":"<p>If you're using a productscience plugin version greater that 0.12.1, you can selectively integrate the productscience plugin into your Gradle build. You will do this by applying the plugin only to specific build types.</p> <p>To do this, insert a <code>productScience</code> block at the top of your app/build.gradle file.  Inside the ProGuard block, add a block corresponding to the build type (must have the same name) and set <code>enabled</code> to <code>true</code>.</p> GroovyKotlin DSL app/build.gradle<pre><code>plugins {\n    id \"com.android.application\"\n    id \"kotlin-android\"\n}\napply plugin: \"com.productscience.transformer.plugin\" \nproductScience {\n    psiRelease {\n        enabled true\n    }\n}\n\nandroid {\n    ...\n    buildTypes {\n        psiRelease {\n            minifyEnabled true\n        }\n        release {\n            minifyEnabled true\n        }\n    }\n}\n</code></pre> app/build.gradle.kts<pre><code>plugins {\n    id(\"com.android.application\")\n    id(\"kotlin-android\")\n    id(\"com.productscience.transformer.plugin\")\n}\n\nproductScience {\n    create(\"psiRelease\") {\n        isEnabled = true\n    }\n}\n\nandroid {\n    ...\n    buildTypes {\n        create(\"psiRelease\") {\n            isMinifyEnabled = true\n        }\n\n        getByName(\"release\") {\n            isMinifyEnabled = true\n        }\n    }\n}\n</code></pre> <p>If the <code>productScience</code> block is missing or empty, the plugin will be applied to all build types. If one or more build types appear in the <code>productScience</code> block, the plugin will be applied only to those build types that have <code>enabled</code> set to <code>true</code>. </p>"},{"location":"mobile/integration/android/integration-faq-android/","title":"Integration FAQ","text":""},{"location":"mobile/integration/android/integration-faq-android/#integration-faq-android","title":"Integration FAQ - Android","text":""},{"location":"mobile/integration/android/integration-faq-android/#use-cli-tool-to-build","title":"Use CLI Tool to build","text":"<p>CLI Tool will automatically retry and fix most issues experienced </p><pre><code>java -jar integration-cli.jar \"./gradlew assembleRelease --stacktrace\"\n</code></pre> On failure share the created <code>ps-output</code> directory to help us debug"},{"location":"mobile/integration/android/integration-faq-android/#build-duration","title":"Build Duration","text":"<p>Instrumenting takes significant time (oftentimes &gt; 1 hour), let the build run until completion even if it looks like it has stalled</p> <p>Common steps it may appear to hang on: <code>:app:dexAppRelease</code></p>"},{"location":"mobile/integration/android/integration-faq-android/#proguard-rules","title":"Proguard Rules","text":"<p>Setting proper Proguard rules will also help reduce build time, especially important during the R8 minify step. Check these are set in the R8/Proguard config file (proguard-rules.pro): </p><pre><code>-keep class com.productscience.transformer.module.** { *; } \n-keep class com.productscience.** { *; }\n</code></pre>"},{"location":"mobile/integration/android/integration-faq-android/#memory-usage","title":"Memory Usage","text":"<p>Instrumenting requires quite a lot of memory, for the best success rate, increase the heap size available. See example for 12GB, adjust as necessary: </p><pre><code>org.gradle.jvmargs=-Xmx12288m         // gradle.properties\n\ndexOptions { javaMaxHeapSize \"12g\" }  // build.gradle\n</code></pre>"},{"location":"mobile/integration/android/integration-faq-android/#gradle-settings","title":"Gradle Settings","text":""},{"location":"mobile/integration/android/integration-faq-android/#check-cache-configuration-disabled","title":"Check Cache Configuration Disabled","text":"<p>Sometimes cache configuration can cause issues with instrumentation. Support currently in development</p>"},{"location":"mobile/integration/android/integration-faq-android/#check-plugin-applied-to-correct-build-variant","title":"Check Plugin Applied to Correct Build Variant","text":"<p>Ensure that plugin is applied to the built variant chosen in the CLI command</p>"},{"location":"mobile/integration/android/integration-faq-android/#screen-recording","title":"Screen Recording","text":"<p>Some apps disable screen recording for security reasons. For Product Science plugin builds, you may want to keep screen recording enabled so that the screen recording can be synchronized to recorded traces.  To do this for a specific build type, it is recommended to create a boolean variable in the <code>gradle.build</code> file and use that in code to guard the toggling of the <code>Window</code> flags.</p> <p>For example, if you have the following code in your Activity to disable screen recording:</p> <pre><code>getWindow.setFlags(LayoutParams.FLAG_SECURE, LayoutParams.FLAG_SECURE);\n</code></pre> <p>Set up the following variable in the <code>build.gradle</code> file for the app:</p> GroovyKotlin DSL app/build.gradle<pre><code>...\nandroid {\n    ...\n    buildFeatures {\n        buildConfig true\n    }\n    defaultConfig {\n        buildConfigField \"boolean\", \"disableScreenRecording\", \"true\"\n    }\n    buildTypes {\n        psiRelease {\n            buildConfigField \"boolean\", \"disableScreenRecording\", \"false\"            \n        }\n        release {\n            buildConfigField \"boolean\", \"disableScreenRecording\", \"true\"\n        }\n    }\n}\n</code></pre> app/build.gradle<pre><code>...\nandroid {\n    ...\n    buildFeatures {\n        buildConfig = true\n    }\n    defaultConfig {\n        buildConfigField(\"boolean\", \"disableScreenRecording\", \"true\")\n    }\n    buildTypes {\n        psiRelease {\n            buildConfigField(\"boolean\", \"disableScreenRecording\", \"false\")            \n        }\n        release {\n            buildConfigField(\"boolean\", \"disableScreenRecording\", \"true\")\n        }\n    }\n}\n</code></pre> <p>Then you can wrap the call for <code>setFlags</code> to conditionally enable screen recording for the Product Science build.</p> <pre><code>if (Build.Config.disableScreenRecording) {\n    getWindow.setFlags(LayoutParams.FLAG_SECURE, LayoutParams.FLAG_SECURE);\n}\n</code></pre>"},{"location":"mobile/integration/android/user-flow/","title":"User Flow Annotation","text":""},{"location":"mobile/integration/android/user-flow/#manual-annotation-for-user-flows","title":"Manual Annotation for User Flows","text":"<p>In addition to automatically instrumenting your app, the Product Science SDK provides a <code>userflow</code> library that enables manual annotation of user flows in your code.  This can be useful for tracking and comparing timing changes between specific events across traces.</p> <p>The steps to add and use the library are below.</p>"},{"location":"mobile/integration/android/user-flow/#dependencies","title":"Dependencies","text":"<p>Add the userflow library as a dependency in <code>app/build.gradle</code></p> <pre><code>    dependencies {\n        implementation \"com.productscience.userflow:userflow:0.18.18\"\n    }\n</code></pre>"},{"location":"mobile/integration/android/user-flow/#annotation-process","title":"Annotation Process","text":"<p>There are three static methods used to annotate user flows:</p> <ul> <li><code>UserFlow#start</code></li> <li><code>UserFlow#custom</code></li> <li><code>UserFlow#end</code></li> </ul> <p>Each of these methods takes a string argument (UserFlow ID) and a nullable String argument (comment message).</p> <p>Import UserFlow class.</p> <pre><code>import com.productscience.userflow.v2.UserFlow;\n</code></pre>"},{"location":"mobile/integration/android/user-flow/#1-starting-a-userflow","title":"1. Starting a UserFlow","text":"<p>To start a UserFlow, call <code>UserFlow#start</code> and pass it an ID and a String message.</p> <pre><code>    // ...\n    UserFlow.start(\"appStart\")\n    // or\n    UserFlow.start(\"appStart\", \"Comment message\")\n</code></pre>"},{"location":"mobile/integration/android/user-flow/#2-annotations-userflows-milestones","title":"2. Annotations UserFlow's milestones","text":"<p>While a UserFlow is in progress, you can make calls to <code>UserFlow#custom</code> passing the UserFlow ID and a String message. </p> <p>This can be useful to annotate events along the UserFlow (e.g., reaching a milestone or annotating different conditional paths among others).</p> <pre><code>    UserFlow.custom(\"appStart\", \"UserFlow hit a milestone\")\n</code></pre>"},{"location":"mobile/integration/android/user-flow/#3-ending-a-userflow","title":"3. Ending a UserFlow","text":"<p>To end a UserFlow, call <code>UserFlow#end</code> passing the ID of the UserFlow to end and an optional String message.</p> <pre><code>    UserFlow.end(\"appStart\")\n    // or\n    UserFlow.end(\"appStart\", \"One more comment message\")\n</code></pre>"},{"location":"mobile/integration/android/user-flow/#examples","title":"Examples","text":""},{"location":"mobile/integration/android/user-flow/#userflow-annotations-on-pstool","title":"UserFlow Annotations on PSTool","text":"<p>An example of a slice added via the UserFlow Annotations library. The gray flag on the trace is automatically created for events marked by these slices. </p>"},{"location":"mobile/integration/android/user-flow/#sample-app","title":"Sample app","text":"<p>There is a sample app demonstrating the use of the userflow library at: https://github.com/product-science/demoapps/tree/main/Android/userflow-android-example</p>"},{"location":"mobile/integration/android/user-flow/#project-integration","title":"Project Integration","text":"<p>If you want to enable UserFlow Annotations to be used with Regression Analysis feature, you should enable <code>UserFlow#setRegressionAnalysisEnabled(true)</code>.   </p> <p>CAUTION: this method can enable some extra work. You will have to take steps to ensure that regression analysis is disabled in production builds.</p>"},{"location":"mobile/integration/ios/bazel/","title":"Build / Bazel","text":""},{"location":"mobile/integration/ios/bazel/#ios-build-instructions-bazel","title":"iOS Build Instructions - Bazel","text":"<p>The following instructions describe how to add Product Science instrumentation to a Bazel project's iOS application.</p> <p>Example</p> <p>Several of this document's steps include an \"Example\" section that describes how to apply the instructions to a demo Bazel application named SimpleApp. If you'd like to follow along, just clone our demoapps repository:</p> <pre><code>% cd ~\n% git clone https://github.com/product-science/demoapps\n</code></pre> <p>Our examples will assume that you've cloned the repository to your home directory and kept the repository's default directory name (<code>demoapps</code>). If you decide to change either of these details, then modify the specified paths to fit your setup.</p>"},{"location":"mobile/integration/ios/bazel/#1-copy-productscienceyaml-to-your-projects-workspace-directory","title":"1. Copy <code>productscience.yaml</code> to your project's workspace directory","text":"<p>NOTE: If your build environment does not allow network access, then you will be provided with a 'productscience.zip' archive instead of a .yaml file. Copy the entire .zip archive to your workspace directory (do not unzip the archive).</p> <p>Product Science will provide you with a <code>productscience.yaml</code> file that contains your credentials and configuration details.</p> <p>Info</p> <p>If you haven't received this file or need to request a new copy, please reach out to your designated integration support contact via established communication channel. If this contact is unavailable, send an email to support@productscience.ai for assistance.</p> <p>Once you've received your <code>productscience.yaml</code> file, copy the file to your project's workspace directory (next to the <code>WORKSPACE</code> file).</p> Example <p>Assuming you've downloaded <code>productscience.yaml</code> to your <code>~/Downloads</code> directory:</p> <pre><code>% cp ~/Downloads/productscience.yaml ~/demoapps/iOS/SimpleApp-Bazel\n\n% ls -go ~/demoapps/iOS/SimpleApp-Bazel\n...\n-rw-r--r--  1    819 May 11 2023 WORKSPACE\n-rw-r--r--  1   3619 May 12 2023 productscience.yaml\n...\n</code></pre>"},{"location":"mobile/integration/ios/bazel/#2-install-buildozer","title":"2. Install <code>buildozer</code>","text":"<p><code>buildozer</code> is a build tool created and maintained by the Bazel team to rewrite <code>BUILD</code> files. <code>PSCliCodeInjector</code> uses this tool to configure your project's <code>BUILD</code> files during injection.</p> <p>Before running <code>PSCliCodeInjector</code> for the first time, you'll need to install <code>buildozer</code> on the host computer. Instructions for installation can be found on the project's repository.</p>"},{"location":"mobile/integration/ios/bazel/#3-install-psclicodeinjector","title":"3. Install <code>PSCliCodeInjector</code>","text":"<p>NOTE: Offline builds are not hosted on our public repo. If your build environment does not allow network access, PS will work with your team to share offline-compatible builds via a private channel.</p> <p>Download the latest installer package (named <code>PSCliCodeInjector.pkg</code>) from our public plugin repo.</p> <p>Double-click the downloaded <code>.pkg</code> to start the installation process. By default, <code>PSCliCodeInjector</code> will be installed to <code>/usr/local/bin</code>.</p> <p></p>"},{"location":"mobile/integration/ios/bazel/#4-run-psclicodeinjector","title":"4. Run <code>PSCliCodeInjector</code>","text":"<p><code>PSCliCodeInjector</code> adds Product Science's instrumentation to your project's source code.</p> <p>Before any changes are made to your project, <code>PSCliCodeInjector</code> will create a copy of your project's directory and save it to a backup location. <code>PSCliCodeInjector</code> will then add Product Science's instrumentation to your workspace directory's source code. The backup directory will contain the original, un-instrumented code.</p> <p>Important</p> <p>When you want to create an instrumented build, be sure to use the original project directory and not the backup directory.</p> <p>Important</p> <p>The code changes made by <code>PSCliCodeInjector</code> result in a large number of compile-time warnings, which can cause build failure if Bazel's max stdout/stderr log size is exceeded. To prevent this, include the following option in your <code>bazel build</code> command: </p><pre><code>--experimental_ui_max_stdouterr_bytes=-1\n</code></pre>"},{"location":"mobile/integration/ios/bazel/#basic-use","title":"Basic use","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\"\n</code></pre> <p>There are only two required parameters when running <code>PSCliCodeInjector</code>:</p> <ol> <li><code>root-directory</code>: This is the path to your project's workspace directory. There must be a Bazel <code>WORKSPACE</code> file at the top level of this directory.</li> <li><code>console-build-command</code>: This is the build command that the tool will use to confirm that your project compiles successfully before and after injection. This command will be run from your project's workspace directory.</li> </ol> Example <p>Assuming that you've cloned the demoapps repository to <code>~/demoapps</code>, the full path to your <code>root-directory</code> (aka your workspace directory) will be <code>~/demoapps/iOS/SimpleApp-Bazel</code>.</p> <p>Product Science does not currently support the iOS Simulator as a run destination, so the app will need to be built for device. To build for device, you'll first need to configure the app's code-siging settings. Perform the following steps:</p> <ol> <li>Copy a valid provisioning profile to <code>~/demoapps/iOS/SimpleApp-Bazel/ios-app/configuration/</code>. Rename the provisioning profile to <code>SimpleApp.mobileprovision</code>.</li> <li>Run the following command, replacing <code>&lt;YOUR_BUNDLE_ID&gt;</code> with a bundle identifier that will work with your copied provisioning profile.</li> </ol> <pre><code>echo \"BUNDLE_ID = \\\"&lt;YOUR_BUNDLE_ID&gt;\\\"\" &gt;&gt; ~/demoapps/iOS/SimpleApp-Bazel/ios-app/configuration/codesign.bzl\n</code></pre> <p>Once that's done, the following will be your <code>console-build-command</code>:   </p><pre><code>bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\n</code></pre> <p>Given the information above, your full <code>PSCliCodeInjector</code> command will be:</p> <pre><code>% PSCliCodeInjector ~/demoapps/iOS/SimpleApp-Bazel \\\n    --console-build-command=\"bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\"\n</code></pre> <p>Run this command and wait for the tool to finish its work. When done, several of the files inside <code>~/demoapps/iOS/SimpleApp-Bazel</code> will have uncommitted changes. You can see an overview of the changes using git:</p> <pre><code>% git -C ~/demoapps status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n          modified:   iOS/SimpleApp-Bazel/ios-app/BUILD\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/AppDelegate.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/FirstViewController.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/SceneDelegate.swift\n          modified:   iOS/SimpleApp-Bazel/ios-app/SimpleApp/SecondViewController.swift\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        iOS/SimpleApp-Bazel-BACKUP/\n        iOS/SimpleApp-Bazel/PSKit/\n        iOS/SimpleApp-Bazel/productscience.yaml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Five existing files have been modified. There are also three untracked items - the <code>productscience.yaml</code> file that you added earlier, along with two new directories:</p> <ul> <li><code>iOS/SimpleApp-Bazel-BACKUP/</code> is a snapshot of <code>iOS/SimpleApp-Bazel/</code>, created before any changes are made to the contents of <code>iOS/SimpleApp-Bazel/</code>. By default, the backup directory is named <code>&lt;root-directory&gt;-BACKUP</code> and added as a sibling directory of the original. You can change this behavior using the <code>--backup-dir</code> option (see \"Changing the backup directory\" below).</li> <li><code>iOS/SimpleApp-Bazel/PSKit/</code> is Product Science's framework package, responsible for tracing the app's code. An example of its use can be found in<code>iOS/SimpleApp-Bazel/ios-app/BUILD</code>, where it is added as a dependency of SimpleAppLib.</li> </ul> <p>At this point, you should be able to install the app to your iOS device and record a trace.</p> <p>To install the app:</p> <p>The .ipa can be found at <code>~/demoapps/iOS/SimpleApp-Bazel/bazel-out/applebin_ios-ios_arm64-fastbuild-ST-9204ac8255b1/bin/ios-app/SimpleApp.ipa</code>. If you have ios-deploy on your host computer, you can install this .ipa to your device from the command line:</p> <pre><code>% ios-deploy --bundle ~/demoapps/iOS/SimpleApp-Bazel/bazel-out/applebin_ios-ios_arm64-fastbuild-ST-9204ac8255b1/bin/ios-app/SimpleApp.ipa\n</code></pre> <p>If you'd prefer, you can also install the app from Xcode's \"Devices and Simulators\" window.</p> <p>To record a trace:</p> <p></p>"},{"location":"mobile/integration/ios/bazel/#changing-the-backup-directory","title":"Changing the backup directory","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\" \\\n  --backup-dir &lt;backup-directory&gt;\n</code></pre> <p>A backup of your project's root directory will be created before injection is run. By default, this backup directory is created at  <code>&lt;root-directory&gt;-BACKUP</code>.</p> <p>You can override the location of the backup directory by including the <code>--backup-dir</code> option with a custom directory path.</p> Example <p>You're about to re-run injection on the SimpleApp-Bazel workspace, and <code>PSCliCodeInjector</code> doesn't currently support modifications to already-injected code. Before continuing, revert the changes from previous examples that you made to the <code>SimpleApp-Bazel</code> directory:</p> <pre><code>% git -C ~/demoapps/iOS/SimpleApp-Bazel/ add .\n% git -C ~/demoapps/iOS/SimpleApp-Bazel/ reset --hard HEAD\n</code></pre> <p>You're also about to specify a custom backup directory so, to avoid confusion, delete the previously-created backup directory:</p> <pre><code>% rm -r ~/demoapps/iOS/SimpleApp-Bazel-BACKUP/\n</code></pre> <p>The local <code>~/demoapps</code> working tree should now be clean. You can confirm by checking its git status:</p> <pre><code>% git -C ~/demoapps/iOS/SimpleApp-Bazel/ status\nOn branch main\nnothing to commit, working tree clean\n</code></pre> <p>We've discarded the <code>productscience.yaml</code> file, so we'll need to re-copy it to the workspace directory:</p> <pre><code>% cp ~/Downloads/productscience.yaml ~/demoapps/iOS/SimpleApp-Bazel\n\n% ls -go ~/demoapps/iOS/SimpleApp-Bazel\n...\n-rw-r--r--  1    819 May 11 2023 WORKSPACE\n-rw-r--r--  1   3619 May 12 2023 productscience.yaml\n...\n</code></pre> <p>Let's run <code>PSCliCodeInjector</code> on the SimpleApp-Bazel workspace again, but this time we'll save the backup directory to the <code>/tmp</code> directory. Let's also rename the backup directory to something a bit shorter (<code>SimpleAppBackup</code>). Your new <code>backup-directory</code> will be <code>/tmp/SimpleAppBackup</code>, and your new <code>PSCliCodeInjector</code> command will be:</p> <pre><code>% PSCliCodeInjector ~/demoapps/iOS/SimpleApp-Bazel \\\n    --console-build-command \"bazel build //ios-app:SimpleApp --ios_multi_cpus=arm64\" \\\n    --backup-dir /tmp/SimpleAppBackup\n</code></pre> <p>Run this command and wait for the tool to finish its work. When done, the changes should almost match those that you saw after finishing the previous examples. The only difference will be that <code>~/demoapps/iOS/SimpleApp-Bazel-BACKUP/</code> no longer shows up in that directory's <code>git status</code>. Instead, you can find the backup directory at <code>/tmp/SimpleAppBackup</code>:</p> <pre><code>% ls -go /tmp/SimpleAppBackup/\ntotal 16\n-rw-r--r--  1   819 May 16 19:50 WORKSPACE\n...\n</code></pre>"},{"location":"mobile/integration/ios/bazel/#changing-the-configuration-archive-path-offline-compatible-builds-only","title":"Changing the configuration archive path (offline-compatible builds only)","text":"<p>NOTE: This option is only relevant if your build environment does not allow network access. Standard builds will load this information automatically from our API.</p> <pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\" \\\n  --local-config &lt;config-archive&gt;\n</code></pre> <p>By default, PSCliCodeInjector expects your configuration archive to be named 'productscience.zip', and to be placed in your project's root directory.</p> <p>If you'd prefer to keep the archive somewhere else, you can tell PSCliCodeInjector where to look by passing the archive's full path (including name) to the <code>--local-config</code> option.</p>"},{"location":"mobile/integration/ios/bazel/#other-options","title":"Other options","text":"<p><code>PSCliCodeInjector</code> accepts several other options. Pass the <code>--help</code> flag to see the full list:</p> <pre><code>PSCliCodeInjector --help\n</code></pre>"},{"location":"mobile/integration/ios/bazel/#5-share-build-with-product-science","title":"5. Share build with Product Science","text":"<p>Please follow instructions at iOS Distribution Instructions to share your build with us.</p>"},{"location":"mobile/integration/ios/distribution/","title":"App Distribution","text":""},{"location":"mobile/integration/ios/distribution/#ios-application-distribution-instructions","title":"iOS Application Distribution Instructions","text":"<p>iOS applications are distributed as IPA archives. To export application it must be signed with some Apple Development Team certificate.</p>"},{"location":"mobile/integration/ios/distribution/#option-1-testflight","title":"Option 1: TestFlight","text":"<p>TestFlight is the default Apple tool for beta testing: https://developer.apple.com/testflight/</p>"},{"location":"mobile/integration/ios/distribution/#distribution-process","title":"Distribution Process","text":"<ol> <li>PS: Send employee emails</li> <li>Client: Build PS-injected app and upload it in TestFlight</li> <li>Client: Invite Product Science emails as testers for uploaded app</li> </ol>"},{"location":"mobile/integration/ios/distribution/#option-2-ad-hoc-ipa","title":"Option 2: Ad-Hoc IPA","text":"<p>App can be distributed directly as IPA with two options for signing</p>"},{"location":"mobile/integration/ios/distribution/#distribution-process_1","title":"Distribution Process","text":"<ol> <li>Client: Build PS-injected app and export it as Ad-Hoc</li> <li>Client: Send exported IPA to PS</li> </ol> How to export app as ad-hoc in XCode Product \u2192 Archive     Window \u2192 Organizer   Distribute App \u2192 Ad-Hoc"},{"location":"mobile/integration/ios/distribution/#signing-options","title":"Signing Options","text":""},{"location":"mobile/integration/ios/distribution/#best-option-add-ps-devices-to-apple-development-account","title":"Best Option: Add PS Devices to Apple Development Account","text":"<p>App can be distributed directly as IPA and installed on device if device\u2019s UUID is added to Apple Development account.</p> <ol> <li>PS: Send employee devices UUIDs</li> <li>Client: Add device to company\u2019s devices list: https://developer.apple.com/account/resources/devices/list</li> </ol> <p>Limitations: Apple Development allows only 100 added devices simultaneously. </p>"},{"location":"mobile/integration/ios/distribution/#risky-option-re-signing-ipa-after-build","title":"Risky Option: Re-Signing IPA After Build","text":"<p>In most cases an IPA can be re-signed with another Apple Development account after build, but this process is not guaranteed to work. We don\u2019t recommend to use it.</p>"},{"location":"mobile/integration/ios/xcode/","title":"Build / Xcode","text":""},{"location":"mobile/integration/ios/xcode/#ios-build-instructions-xcode","title":"iOS Build Instructions - Xcode","text":"<p>The following instructions describe how to add Product Science instrumentation to an iOS application that is built using Xcode. Bazel-specific instructions can be found here.</p> <p>Info</p> <p>If your build environment does not allow network access to our servers <code>https://prod.productscience.app/api/v1/*</code>, please add to your allowlist. If your network settings prevent adding this endpoint, you will be provided with plugin and config archives detailed in sections below.</p>"},{"location":"mobile/integration/ios/xcode/#1-copy-productscienceyaml-to-your-projects-root-directory","title":"1. Copy <code>productscience.yaml</code> to your project's root directory","text":"<p>NOTE: If your build environment does not allow network access, then you will be provided with a 'productscience.zip' archive instead of a .yaml file. Copy the entire .zip archive to your workspace directory (do not unzip the archive).</p> <p>Product Science will provide you with a <code>productscience.yaml</code> file that contains your credentials and configuration details.</p> <p>Info</p> <p>If you haven't received this file or need to request a new copy, please reach out to your designated integration support contact via established communication channel. If this contact is unavailable, send an email to support@productscience.ai for assistance.</p> <p>Once you've received your <code>productscience.yaml</code> file, copy the file to your project's root directory (next to your <code>.xcodeproj</code> or <code>.xcworkspace</code>).</p>"},{"location":"mobile/integration/ios/xcode/#2-install-psclicodeinjector","title":"2. Install <code>PSCliCodeInjector</code>","text":"<p>NOTE: Offline builds are not hosted on our public repo. If your build environment does not allow network access, PS will work with your team to share offline-compatible builds via a private channel.</p> <p>Download the latest installer package (named <code>PSCliCodeInjector.pkg</code>) from our public plugin repo.</p> <p>Double-click the downloaded <code>.pkg</code> to start the installation process. By default, <code>PSCliCodeInjector</code> will be installed to <code>/usr/local/bin</code>.</p> <p></p>"},{"location":"mobile/integration/ios/xcode/#3-run-psclicodeinjector","title":"3. Run <code>PSCliCodeInjector</code>","text":"<p><code>PSCliCodeInjector</code> adds Product Science's instrumentation to your project's source code.</p> <p>Before any changes are made to your project, <code>PSCliCodeInjector</code> will create a copy of your project's directory and save it to a backup location. <code>PSCliCodeInjector</code> will then add Product Science's instrumentation to your application's source code. The backup directory will contain the original, un-instrumented code.</p> <p>Important</p> <p>When you want to create an instrumented build, be sure to use the original project directory and not the backup directory.</p> <p>Important</p> <p>The code changes made by <code>PSCliCodeInjector</code> result in a large number of compile-time warnings. If your project's <code>SWIFT_TREAT_WARNINGS_AS_ERRORS</code> setting is enabled, please disable before running code injection.</p>"},{"location":"mobile/integration/ios/xcode/#basic-use","title":"Basic use","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\"\n</code></pre> <p>There are only two required parameters when running <code>PSCliCodeInjector</code>:</p> <ol> <li><code>root-directory</code>: This is the path to your project's root directory. There must be either an <code>.xcodeproj</code> or an <code>.xcworkspace</code> at the top level of this directory. This is the same directory that you added your <code>productscience.yaml</code> file to.</li> <li><code>console-build-command</code>: This is the <code>xcodebuild</code> command that the tool will use to confirm that your project compiles successfully before and after injection. This command will be run from your project's root directory.</li> </ol> <p>Important</p> <p>PSCliCodeInjector parses <code>console-build-command</code>\u2019s output to identify issues with the injected code. Be sure not to pipe the build\u2019s results through tools like <code>xcbeautify</code>, <code>xcpretty</code>, etc. or this logic might not work correctly.</p>"},{"location":"mobile/integration/ios/xcode/#changing-the-backup-directory","title":"Changing the backup directory","text":"<pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\" \\\n  --backup-dir &lt;backup-directory&gt;\n</code></pre> <p>A backup of your project's root directory will be created before injection is run. By default, this backup directory is created at  <code>&lt;root-directory&gt;-BACKUP</code>.</p> <p>You can override the location of the backup directory by including the <code>--backup-dir</code> option with a custom directory path.</p>"},{"location":"mobile/integration/ios/xcode/#injecting-package-dependencies","title":"Injecting package dependencies","text":"<p>If your project depends on Swift packages, you can inject them using the <code>--inject-packages</code> option. With this option, each package's source code will be downloaded and added to the project as a local package dependency. This option also requires that you specify either a target or a scheme name:</p> <p></p><pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n--inject-packages --target-name &lt;target-name&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\"\n</code></pre> or <pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n--inject-packages --scheme-name &lt;scheme-name&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\"\n</code></pre>"},{"location":"mobile/integration/ios/xcode/#changing-the-configuration-archive-path-offline-compatible-builds-only","title":"Changing the configuration archive path (offline-compatible builds only)","text":"<p>NOTE: This option is only relevant if your build environment does not allow network access. Standard builds will load this information automatically from our API.</p> <pre><code>PSCliCodeInjector &lt;root-directory&gt; \\\n  --console-build-command \"&lt;console-build-command&gt;\" \\\n  --local-config &lt;config-archive&gt;\n</code></pre> <p>By default, PSCliCodeInjector expects your configuration archive to be named 'productscience.zip', and to be placed in your project's root directory.</p> <p>If you'd prefer to keep the archive somewhere else, you can tell PSCliCodeInjector where to look by passing the archive's full path (including name) to the <code>--local-config</code> option.</p>"},{"location":"mobile/integration/ios/xcode/#other-options","title":"Other options","text":"<p><code>PSCliCodeInjector</code> accepts several other options. Pass the <code>--help</code> flag to see the full list:</p> <pre><code>PSCliCodeInjector --help\n</code></pre>"},{"location":"mobile/integration/ios/xcode/#4-distribute-build","title":"4. Distribute Build","text":"<p>Please follow instructions at iOS Distribution Instructions to share your build with us.</p>"},{"location":"mobile/integration/ios/xcode/#example-firefox-for-ios","title":"Example: Firefox for iOS","text":""},{"location":"mobile/integration/ios/xcode/#1-clone-firefox-ios-repo","title":"1. Clone Firefox iOS repo","text":"<pre><code>git clone https://github.com/mozilla-mobile/firefox-ios\n</code></pre>"},{"location":"mobile/integration/ios/xcode/#2-copy-productscienceyaml-and-install-psclicodeinjector","title":"2. Copy <code>productscience.yaml</code> and install <code>PSCliCodeInjector</code>","text":"<p>Copy your <code>productscience.yaml</code> file to the <code>firefox-ios</code> directory as described in Step 1 above.</p> <p>Install <code>PSCliCodeInjector</code> as described in Step 2 above.</p> <p>If you use a standalone offline build, put <code>productscience.zip</code> archive in the project directory.</p>"},{"location":"mobile/integration/ios/xcode/#3-build-with-psclicodeinjector","title":"3. Build with <code>PSCliCodeInjector</code>","text":"<p>The following example assumes that you are running the command from the cloned <code>firefox-ios</code> directory's parent directory, not from inside the <code>firefox-ios</code> directory.</p> <pre><code>PSCliCodeInjector firefox-ios \\\n    --backup-dir firefox-ios-BACKUP \\\n    --console-build-command=\\\n      \"xcodebuild \\\n          -project Client.xcodeproj \\\n          -scheme Fennec \\\n          -destination 'name=iPhone 13 mini' \\\n          -sdk iphoneos\"\n</code></pre> <p>Note this example uses <code>iPhone 13 mini</code> as the example destination- this can be changed.</p> <p>When complete, the <code>firefox-ios</code> directory will have been transformed. <code>firefox-ios-BACKUP</code> is a directory with original project. </p><pre><code>drwxr-xr-x  76 user  staff      2432 Jul 12 16:26 firefox-ios\ndrwxr-xr-x  77 user  staff      2464 Jul 12 16:46 firefox-ios-BACKUP\n</code></pre> <p>Use <code>firefox-ios</code> for your pipeline or Xcode.</p>"},{"location":"mobile/record-n-upload/android/","title":"Android","text":""},{"location":"mobile/record-n-upload/android/#android-trace-recording","title":"Android Trace Recording","text":""},{"location":"mobile/record-n-upload/android/#record","title":"Record","text":""},{"location":"mobile/record-n-upload/android/#1-install-instrumented-app","title":"1. Install instrumented app","text":"<p>Install the app you want to analyze that is instrumented with PS plugin. Don't have the app? Learn how to build the instrumented app here.</p>"},{"location":"mobile/record-n-upload/android/#2-select-a-user-flow-you-want-to-analyze","title":"2. Select a user flow you want to analyze","text":"<p>At Product Science, performance optimization starts with defining key user flows that bring the most value to users.</p>"},{"location":"mobile/record-n-upload/android/#what-is-a-user-flow","title":"What is a user flow?","text":"<p>There are several ways to select a user flow:</p> <ul> <li>[Preferred] An \"Action-Reaction\" one-step flow. Here, the user starts with an \"Action\" (pressing a button, swiping, selecting a menu item, etc) and you measure until a \"Reaction\" (new page being fully displayed, etc). These flows are clean and simple to analyze.</li> <li>More complex flows. Sometimes, there are multiple steps that need to be strung together to get an idea of the performance of a feature. It can make sense to have flows like these, but consider carefully if they can be broken down into smaller parts.</li> </ul> <p>Either way, a sequence of functions execute before the user finally arrives at the final state (\"Reaction\"). This is where our AI technology comes into play\u2014highlighting the sequences that formed into what we call execution paths.</p> <p>Note: User flows should be short in length, 30 seconds or less, to enable the analysis to be a manageable size.</p>"},{"location":"mobile/record-n-upload/android/#3-get-to-the-beginning-of-your-user-flow","title":"3. Get to the beginning of your user flow","text":"<p>Before you start recording: 1. [Optional Step] Quit all open apps so nothing slows down the app you are measuring. 2. Navigate to the beginning of your user flow. If recording a trace for app start, just navigate to the icon for your app on the Home screen.</p>"},{"location":"mobile/record-n-upload/android/#4-start-screen-and-trace-recording","title":"4. Start screen and trace recording","text":"<p>Start both the screen and trace recording as described above.</p> <p>The 'Record trace' button should be available in your quick settings tile. If it is not, go back to the section on enabling trace recording and ensure you enabled the Show Quick Settings tile.</p> <p></p>"},{"location":"mobile/record-n-upload/android/#5-execute-your-user-flow","title":"5. Execute your user flow","text":"<p>Perform the user action to execute the user flow you are analyzing.</p>"},{"location":"mobile/record-n-upload/android/#6-stop-recordings-at-the-end-of-your-flow","title":"6. Stop recordings at the end of your flow","text":"<p>When you have reached the end of the user flow (\"Reaction\"), swipe down from the top of your screen again to access Quick Settings and tap both the \"Record trace\" and \"Screen recorder\" buttons to turn the recordings off.</p>"},{"location":"mobile/record-n-upload/android/#upload","title":"Upload","text":""},{"location":"mobile/record-n-upload/android/#7-upload-your-trace-and-video-to-ps-tool","title":"7. Upload your trace and video to PS Tool","text":"<ul> <li>Open your notification panel &gt; \u201cTap to share you trace\u201d</li> <li>Tap the notification. You will have the option to save it or export it to different apps</li> </ul> <ul> <li> <p>Select the Product Science app (PS)</p> </li> <li> <p>Name the trace, assign it to the relevant\u00a0user flow folder</p> </li> </ul>"},{"location":"mobile/record-n-upload/android/#attach-screen-recording","title":"Attach screen recording","text":"<ul> <li> <p>On the same screen, while the trace details screen is still opened, tap \"Select\"</p> </li> <li> <p>Phone library opens &gt; select the screen recording</p> </li> </ul> <p></p> <ul> <li>Once the trace and video finish uploading and processing, you can view your trace in PS Tool. The uploaded trace will appear in your productscience.app User Flow Library.</li> </ul>"},{"location":"mobile/record-n-upload/ios/","title":"iOS","text":""},{"location":"mobile/record-n-upload/ios/#ios-trace-recording","title":"iOS Trace Recording","text":""},{"location":"mobile/record-n-upload/ios/#record","title":"Record","text":""},{"location":"mobile/record-n-upload/ios/#1-install-instrumented-app","title":"1. Install instrumented app","text":"<ul> <li>Install the app you instrumented in the previous steps. </li> <li>Make sure it is instrumented</li> </ul>"},{"location":"mobile/record-n-upload/ios/#2-select-a-user-flow-you-want-to-analyze","title":"2. Select a user flow you want to analyze","text":"<p>At Product Science, performance optimization starts with defining key user flows that bring the most value to users.</p>"},{"location":"mobile/record-n-upload/ios/#what-is-a-user-flow","title":"What is a user flow?","text":"<p>There are several ways to select a user flow:</p> <ul> <li>[Preferred] An \"Action-Reaction\" one-step flow.    Here, the user starts with an \"Action\" (pressing a button, swiping, selecting a menu item, etc.)    and you measure until a \"Reaction\" (new page being fully displayed, etc.).    These flows are clean and simple to analyze.</li> <li>More complex flows. Sometimes, there are multiple steps that need to be strung together to get an idea of    the performance of a feature.    It can make sense to have flows like these, but consider carefully if they can be broken down into smaller parts.</li> </ul> <p>Either way, a sequence of functions execute before the user finally arrives at the final state (\"Reaction\").  This is where our AI technology comes into play\u2014highlighting the sequences that formed into what  we call execution paths.</p> <p>Note: User flows should be short in length, 30 seconds or less, to enable the analysis to be a manageable size.</p>"},{"location":"mobile/record-n-upload/ios/#3-trace-and-screen-recording","title":"3. Trace and screen recording","text":"<p>You can start trace recording from the instrumented app itself.  If you want to capture app start, you can kick off trace recording from PS Companion app. </p> Step To record App Start Flow To record any Flow other than App Start 1 [Optional] Quit all open apps so nothing slows down the app you are measuring. [Optional] Quit all open apps so nothing slows down the app you are measuring. 2 Open PS Companion app. If you don't have a designated folder for app start, create a new one. Open the folder. Open your instrumented app and perform all the actions before the beginning of the user flow you are analyzing. 3 Start screen recording. Start screen recording. 4 At the bottom right corner, tap thebutton to start trace recording. At the  panel, tapbutton to start trace recording. 5 Perform the user actions from the(user) flowand that you want to optimize. Perform the user actions from the(user) flowand that you want to optimize. 6 Once the final step is fully loaded, at the  panel, tap button to stop recording. Once the final step is fully loaded, at the  panel, tap button to stop recording."},{"location":"mobile/record-n-upload/ios/#upload","title":"Upload","text":""},{"location":"mobile/record-n-upload/ios/#4-upload-trace-to-ps-tool","title":"4. Upload trace to PS Tool","text":"<ul> <li>Tap the 'Export' button to export your trace file.</li> </ul> <ul> <li>Choose PS Companion app among sharing options:</li> </ul> <p>Don't see PS Companion app? Customize the share sheet.</p> <ul> <li>Name the trace, and add it to the corresponding user flow folder</li> </ul>"},{"location":"mobile/record-n-upload/ios/#attach-screen-recording","title":"Attach screen recording","text":"<ul> <li> <p>On the same screen, while the trace details screen is still opened, tap 'Select'</p> </li> <li> <p>Phone library opens &gt; select the screen recording</p> </li> </ul> <p></p> <ul> <li>Once the trace and video finish uploading and processing, you can view your trace in PS Tool.    The uploaded trace will appear in your productscience.app User Flow Library.</li> </ul>"},{"location":"mobile/release-notes/Frame-Drop-Visualization-for-Android/","title":"Frame Drop Visualization for Android","text":""},{"location":"mobile/release-notes/Frame-Drop-Visualization-for-Android/#frame-drop-visualization-for-android","title":"Frame Drop Visualization for Android","text":"<p>In our continuous effort to enhance the performance analysis capabilities of PS Tool, we\u2019ve focused on refining our feature, highlighting  long frames. This feature helps identify frames that remain on screen longer than expected based on the current device\u2019s frame rate,  pinpointing areas where the main thread is overwhelmed, particularly during scroll performance analysis. Building on this, we\u2019ve updated our  highlighting strategy for frames on Android.</p> <p>PS Tool now highlights fewer frames, taking into account clusterization to better focus on scroll performance analysis.  This means we only highlight frames that take 2x longer than expected and clusters of several longer frames, even if they don\u2019t reach  the 2x threshold. This approach confirms the same frame patterns previously reported via PS Tool by performance analysts while significantly  reducing noise. </p> <p>How it looks now: fewer frames highlighted, clear focus on UI Thread Hangs.</p> <p></p>"},{"location":"mobile/release-notes/Product-Analytic-Tags/","title":"Product Analytic Tags","text":""},{"location":"mobile/release-notes/Product-Analytic-Tags/#product-analytic-tags","title":"Product Analytic Tags","text":"<p>This feature allows engineers to see product analytics and custom performance metrics in traces. Got a signal from your APM that screen  loading time took longer? With this feature, you will be able to easily find the exact location on a timeline and see the root cause of the  issues on the trace.</p> <p></p> <p>After the setup, traces will be automatically annotated with product metrics (displayed as grey flags) and placed on the timeline by PS Tool.  This replaces the repeated effort required to locate and annotate each product metric for every new trace recorded, while also ensuring that  no business-important metrics are left behind. This streamlines the identification of performance metrics and allows engineers to focus on  root-cause analysis.</p>"},{"location":"mobile/release-notes/Quick-Start-Guide/","title":"Quick Start Guide","text":""},{"location":"mobile/release-notes/Quick-Start-Guide/#quick-start-guide","title":"Quick Start Guide","text":"<p>The Quick Start Guide assists engineers during the onboarding experience by providing concise and simple instructions to help them leverage  the full potential of the PS Tool.</p> <p></p> <p>The Quick Start Guide will be accessible to users within the tool at all times, ensuring that immediate support is readily available.</p> <p>The Quick Start Guide comprises 3 main components:</p> <ul> <li>Introduction Video A concise, less than 1-minute video that provides an overview of how PS Tool works.\u200d</li> <li>Step-by-Step Guide A detailed step-by-step guide on how to perform various tasks using PS Tool. This section ensures that users gain a  solid grasp of important features that can empower their analysis.</li> <li>Tutorial on how to identify insights Building upon the features learned in previous section, this session focuses on guiding users on how to use these features to find insights efficiently with real life examples and best practices.</li> </ul>"},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/","title":"R1.1 - New UX & UI","text":""},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/#r11-new-ux-ui","title":"R1.1 - New UX &amp; UI","text":""},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/#flow-library","title":"Flow Library","text":"<ul> <li>Create, view and delete flows</li> <li>Sort flow by favorites, popularity, last edited, and by name</li> </ul>"},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/#flow-view","title":"Flow View","text":"<ul> <li>View the list of traces associated with a specific flow </li> <li>Edit flow name and description</li> <li>Subscribe to flow updates</li> <li>Add new traces</li> <li>Select from unassigned traces</li> <li>Manually upload traces</li> <li>Quickly filter by \"My traces only\u201d</li> <li>Filter any field of the table and remove traces from the flow or attach them to a different flow</li> </ul>"},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/#unassigned-traces-view","title":"Unassigned traces view","text":"<ul> <li>Assign traces to one or multiple flows</li> <li>Quick filter by \"My traces only\u201d</li> <li>Filter any field of the table</li> </ul>"},{"location":"mobile/release-notes/R1.1-New-UX-%26-UI/#trace-viewer","title":"Trace Viewer","text":"<ul> <li>Main Timeline (Flame Chart)<ul> <li>Display slices on timeline, sorted by time</li> <li>Display slices full name on hover</li> <li>Ability to zoom with WASD or trackpad</li> <li>Arrow measurement. Enable you to understand the duration of one function to another</li> <li>Ability to add/remove any thread to favorites</li> </ul> </li> <li>Global Timeline (Aggregation View)<ul> <li>Display preview of the whole timeline in a condensed view</li> <li>Ability to set start and end of the focus zone of the video timeline, synced with the flame graph timeline</li> </ul> </li> <li>Search </li> <li>Connections<ul> <li>Build new connections</li> <li>Build connection with real-time feedback</li> <li>Visually highlighting slices available for connections</li> </ul> </li> <li>Flags<ul> <li>Ability to add/remove flag</li> <li>Ability to drag and change flag position</li> <li>Ability to label, change color, and add notes to flags</li> </ul> </li> <li>Details View<ul> <li>Display slice info</li> <li>Display execution path info</li> </ul> </li> <li>Execution paths feature<ul> <li>Ability to show the full execution path available for the selected slice</li> <li>Filter out inactive threads and sort remaining threads by start time</li> <li>Show only the necessary depth of thread</li> </ul> </li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/","title":"R1.2 - Admin","text":""},{"location":"mobile/release-notes/R1.2-Admin/#r12-admin","title":"R1.2 - Admin","text":""},{"location":"mobile/release-notes/R1.2-Admin/#admin-screen","title":"Admin Screen","text":"<p>A system for monitoring, maintaining, and controlling user access to your teams and projects. This is where you can:</p> <ul> <li>Update project icons and details</li> <li>Remove project</li> <li>Update team member's role</li> <li>Send/Resend invitation link </li> <li>Add/Remove a team member</li> <li>Enable/ disable the domain allow list so that team members of your organization can join</li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/#login-screen","title":"Login Screen","text":"<ul> <li>SSO with Google</li> <li>Reset password</li> <li>Register account</li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/#flow-library","title":"Flow Library","text":"<ul> <li>Ability to add, save and edit Flow titles and descriptions.</li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/#trace-viewer","title":"Trace Viewer","text":"<p>[New]</p> <ul> <li>Tools to prioritize and deprioritize threads so that you can better see an execution path</li> <li>Pin thread</li> <li>Deprioritize thread</li> <li>Toggle to show all paths or the main execution path</li> <li>\"Show all paths\" lets you see additional information about how things are executed, while \"Show main execution path\" lets you see the most  straightforward path. </li> <li>Toggle to sort threads to prioritize execution path (Hot Key: K). It provides you the ability to hide threads irrelevant to the execution  path temporarily and see the execution path better.</li> <li>Toggle to dim slices outside execution paths (Hot Key: P). All functions outside of the execution path are dimmed for better visibility. </li> <li>Choreographer auto connections (Android only). Save your time by manually clicking on slices executed under the choreographer during the  initial exploration process.</li> </ul> <p>[Improved]</p> <ul> <li>Slice name and connection lines styles updated for readability enhancement</li> <li>Ability to zoom into small slices and read their names.</li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/#mobile-app","title":"Mobile app","text":"<ul> <li>Ability to create Flows </li> <li>Ability to share and upload traces to PS Tool and</li> <li>SSO with Google</li> </ul>"},{"location":"mobile/release-notes/R1.2-Admin/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Customer Support System</li> <li>You can now file a bug or feature request directly to us. </li> <li>Documentation </li> <li>You can now find all the information from what is PS tool, different performance optimization tracing concepts to step-by-step guides on  how to use it.</li> </ul>"},{"location":"mobile/release-notes/R1.3-Video/","title":"R1.3 - Video","text":""},{"location":"mobile/release-notes/R1.3-Video/#r13-video","title":"R1.3 - Video","text":""},{"location":"mobile/release-notes/R1.3-Video/#new-feature-video-preview-synced-with-trace","title":"New Feature - Video preview synced with trace","text":"<p>With the new Video synced with trace feature you will be able to see what\u2019s happening on the phone screen at every point of the recorded  trace.</p> <p>Video synced with trace feature allows you to:</p> <ul> <li>Quickly find the beginning and end of user flows</li> <li>See the user actions</li> <li>Visually identify performance opportunities (like jitteriness, lags and long network requests)</li> <li>Visually identify when the screen was updated</li> </ul> <p>Seeing how your application functions in real life provides valuable context that helps to understand what\u2019s happening - even when the code  is hard to follow:</p> <ul> <li>Ability to upload recorded video via PS Tool Web UI to a specific trace</li> <li>Video preview thumbnails that allow you to quickly navigate video on the global timeline</li> <li>Video tab<ul> <li>Large Preview of the video recording<ul> <li>Ability to play and pause video</li> <li>Ability to loop video</li> <li>Ability to delete video</li> </ul> </li> </ul> </li> </ul>"},{"location":"mobile/release-notes/R1.3-Video/#companion-app","title":"Companion App","text":"<ul> <li>Ability to upload recorded video via Companion app to a specific trace</li> <li>Added information with User Flow description</li> <li>Added information with project platform information in the project list</li> <li>Added information with user role</li> </ul>"},{"location":"mobile/release-notes/R1.3-Video/#trace-viewer","title":"Trace Viewer","text":"<ul> <li>Vertical scroller on flamegraph, with the ability to jump to the top or bottom</li> <li>Ability to pin a selected choreographer and made it available to anyone opening the trace</li> <li>Disable pin-zoom for non flame chart elements</li> </ul>"},{"location":"mobile/release-notes/R1.3-Video/#misc","title":"Misc","text":"<ul> <li>Updated technical copies to human readable copies for all error messages</li> </ul>"},{"location":"mobile/release-notes/R1.4-Annotations/","title":"R1.4 - Annotations","text":""},{"location":"mobile/release-notes/R1.4-Annotations/#r14-annotations","title":"R1.4 - Annotations","text":"<p>At Product Science, we believe that optimizing your app's performance should start with the most important screens for your business\u2014ones  that drive engagement and app retention. In this release, we are reinforcing our approach by helping our customers define the most critical  user flows even before the team begins to look at the code.</p> <ul> <li>In the new Annotations screen, even non-technical customers will be able to easily mark the beginning and end of the user flow that requires performance optimization. This is achieved by placing human-readable annotations on top of the video.</li> <li>The new Processes x Annotations screen provides tools to connect the human-readable annotations to the code level of your app, making it easy to understand exactly where on the code level the user flow starts and ends.</li> <li>The updated Trace Viewer screen will highlight the beginning and end of the user flow so engineers can focus on this specific part of the  trace and disregard the rest.</li> </ul>"},{"location":"mobile/release-notes/R1.4-Annotations/#new-screen-annotations","title":"New Screen - Annotations","text":"<p>The new annotation screen enables you to mark the beginning of a user flow (i.e. the user\u2019s action) and the end of a user flow (i.e. the  reaction from the app) based on your screen recording.</p>"},{"location":"mobile/release-notes/R1.4-Annotations/#new-screen-processes-x-annotations","title":"New Screen - Processes x Annotations","text":"<p>The PxA Screen enables users to connect annotations made in the previous Annotations screen to slices. This step will allow us to mark the  beginning and end of the user flow on the code level. Joining videos and slices together provides solid visual cues that can\u2019t be gained  from the code alone.</p>"},{"location":"ra/api/","title":"API","text":""},{"location":"ra/api/#1-obtain-upload-context-id","title":"1. Obtain upload context ID","text":""},{"location":"ra/api/#request","title":"Request","text":"<pre><code>POST /api/v1/projects/{projectName}/build-uploads\n</code></pre>"},{"location":"ra/api/#response","title":"Response","text":"<p>JSON body with parameters:</p> <ul> <li><code>id</code> (required) \u2013 integer upload contextId to use in next steps</li> <li><code>dateCreated</code> (required) \u2013 creation date in ISO 8601 format</li> </ul> <p>Example:</p> <pre><code>{\n  \"id\": 28,\n  \"dateCreated\": \"2024-03-07T16:55:49.168Z\"\n}\n</code></pre>"},{"location":"ra/api/#2-submit-build-metadata-and-obtain-upload-url","title":"2. Submit build metadata and obtain upload URL","text":"<p>Call this endpoint when your build file is ready.</p>"},{"location":"ra/api/#request_1","title":"Request","text":"<pre><code>POST /api/v1/projects/{projectName}/builds\n</code></pre> <p>JSON body with parameters:</p> <ul> <li><code>contextId</code> (required) \u2013 upload context ID obtained in step 1</li> <li><code>buildType</code> (required) \u2013 possible values are: <code>APK</code> or <code>INSTRUMENTED_APK</code> </li> <li><code>buildFileName</code> (required) \u2013 file name, e.g. <code>app-play-release.apk</code> </li> <li><code>name</code> \u2013 arbitrary name to distinguish the build, e.g. <code>release-5.2.8</code></li> <li><code>description</code> \u2013 arbitrary build description</li> <li><code>sourceControlId</code> \u2013 VCS commit, e.g. git commit hash</li> <li><code>sourceControlIsoTimestamp</code> \u2013 VCS commit timestamp in ISO 8601 format. To retrieve the timestamp in Git, you can use the following shell command: <code>git show -s --format='%cI' &lt;commit-hash&gt;</code></li> </ul> <p>Example:</p> <pre><code>{\n  \"contextId\": \"28\",\n  \"buildType\": \"APK\",\n  \"buildFileName\": \"app-play-release.apk\",\n  \"name\": \"v5.2.8\",\n  \"description\": \"Arbitrary description\",\n  \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n  \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\"\n}\n</code></pre>"},{"location":"ra/api/#response_1","title":"Response","text":"<p>JSON body with parameters:</p> <ul> <li><code>uploadSpec</code> (required) \u2013 metadata to upload build to a storage<ul> <li><code>method</code> (required) \u2013 HTTP method</li> <li><code>url</code> (required) \u2013 URL</li> <li><code>headers</code> (required) \u2013 map of HTTP headers</li> </ul> </li> <li><code>build</code> (required) \u2013 build metadata<ul> <li><code>id</code> (required) \u2013 build ID number</li> <li><code>contextId</code> (required) \u2013 upload context ID obtained in step 1</li> <li><code>buildType</code> (required) \u2013 possible values are: <code>APK</code> or <code>INSTRUMENTED_APK</code></li> <li><code>buildFileName</code> (required) \u2013 file name, e.g. <code>app-play-release.apk</code></li> <li><code>name</code> \u2013 arbitrary name to distinguish the build, e.g. <code>release-5.2.8</code></li> <li><code>description</code> \u2013 arbitrary build description</li> <li><code>sourceControlId</code> \u2013 VCS commit, e.g. git commit hash</li> <li><code>sourceControlIsoTimestamp</code> \u2013 VCS commit timestamp in ISO 8601 format</li> <li><code>uploadState</code> \u2013 <code>UPLOADING</code> or <code>FINISHED</code> or <code>FAILED</code></li> <li><code>dateCreated</code> \u2013 build creation timestamp </li> </ul> </li> </ul> <p>Example:</p> <pre><code>{\n  \"uploadSpec\": {\n    \"method\": \"PUT\",\n    \"url\": \"https://storage.googleapis.com/some/path?someParams=someValue\",\n    \"headers\": {\n      \"Content-Type\": \"application/octet-stream\",\n      \"X-Goog-Content-Length-Range\": \"0,1073741824\"\n    }\n  },\n  \"build\": {\n    \"id\": 70,\n    \"contextId\": 28,\n    \"buildType\": \"APK\",\n    \"buildFileName\": \"app-play-release.apk\",\n    \"name\": \"v5.2.8\",\n    \"description\": \"Arbitrary description\",\n    \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n    \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n    \"dateCreated\": \"2024-03-08T14:13:33.143Z\",\n    \"uploadState\": \"UPLOADING\"\n  }\n}\n</code></pre>"},{"location":"ra/api/#3-upload-file-to-the-obtained-url","title":"3. Upload file to the obtained URL","text":"<p>Use <code>uploadSpec</code> object from the previous response to upload a file as <code>application/octet-stream</code>.</p> <pre><code>{uploadSpec.method} {uploadSpec.url}\n{uploadSpec.hearder1}: {uploadSpec.header1Value}\n{uploadSpec.hearder2}: {uploadSpec.header2Value}\nContent-Length: {YOUR_FILE_LENGTH}\n\n{YOUR_FILE_BINARY_DATA}\n</code></pre>"},{"location":"ra/example/","title":"cURL example","text":""},{"location":"ra/example/#curl-example","title":"cURL example","text":""},{"location":"ra/example/#1-obtain-upload-context-id","title":"1. Obtain upload context ID","text":"<p>Request: </p> <pre><code>curl -X \"POST\" \"https://test.productscience.app/api/v1/projects/{projectName}/build-uploads\" \\\n     -H 'Authorization: Bearer {YOUR_TOKEN}'\n</code></pre> <p>Response: </p> <p></p><pre><code>HTTP/1.1 201 Created\nContent-Type: application/json\nContent-Length: 50\n</code></pre> <pre><code>{\n  \"id\": 28,\n  \"dateCreated\": \"2024-03-07T16:55:49.168Z\"\n}\n</code></pre>"},{"location":"ra/example/#2-submit-build-metadata-and-obtain-upload-url","title":"2. Submit build metadata and obtain upload URL","text":"<p>Request: </p> <pre><code>curl -X \"POST\" \"https://test.productscience.app/api/v1/projects/{projectName}/builds\" \\\n     -H 'Authorization: Bearer {YOUR_TOKEN}' \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n  \"contextId\": 28,\n  \"buildType\": \"APK\",\n  \"buildFileName\": \"app-play-release.apk\",\n  \"name\": \"v5.2.8\"\n  \"description\": \"Arbitrary description\",\n  \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n  \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n}'\n</code></pre> <p>Response:</p> <p></p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 1430\n</code></pre> <pre><code>{\n  \"uploadSpec\": {\n    \"method\": \"PUT\",\n    \"url\": \"https://storage.googleapis.com/some/path?someParams=someValue\",\n    \"headers\": {\n      \"Content-Type\": \"application/octet-stream\",\n      \"X-Goog-Content-Length-Range\": \"0,1073741824\"\n    }\n  },\n  \"build\": {\n    \"id\": 70,\n    \"contextId\": 28,\n    \"buildType\": \"APK\",\n    \"buildFileName\": \"app-play-release.apk\",\n    \"name\": \"v5.2.8\",\n    \"description\": \"Arbitrary description\",\n    \"sourceControlId\": \"e3c0fedc625094db1cbb2823fd425b51ddc0932e\",\n    \"sourceControlIsoTimestamp\": \"2024-03-07T14:55:43.540Z\",\n    \"dateCreated\": \"2024-03-08T14:13:33.143Z\",\n    \"uploadState\": \"UPLOADING\"\n  }\n}\n</code></pre>"},{"location":"ra/example/#3-upload-file-to-the-obtained-url","title":"3. Upload file to the obtained URL","text":"<p>Request: </p> <pre><code>curl -X \"PUT\" \"https://storage.googleapis.com/some/path?someParams=someValue\" \\\n     -H 'Content-Type: application/octet-stream' \\\n     -H 'X-Goog-Content-Length-Range: 0,1073741824' \\\n     --data-binary \"@{FILE_PATH}\"\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Length: 0\n</code></pre>"},{"location":"ra/overview/","title":"Overview","text":""},{"location":"ra/overview/#regression-analysis","title":"Regression Analysis","text":""},{"location":"ra/overview/#build-uploading","title":"Build Uploading","text":"<p>To make the most of the Regression Analysis feature, it makes sense to incorporate build uploading into a CI/CD pipeline.</p>"},{"location":"ra/overview/#overview","title":"Overview","text":"<p>To upload builds to the PS Tool, follow these steps:</p> <ol> <li>Obtain the upload context ID</li> <li>Build a non-instrumented APK with the UserFlow library enabled</li> <li>Upload the non-instrumented APK to PS Tool</li> <li>Build an instrumented APK with the UserFlow library enabled</li> <li>Upload the instrumented APK to PS Tool</li> </ol> <p>After receiving a context ID, tasks could be parallelized: building and uploading the non-instrumented version (steps 2 and 3), and building and uploading the instrumented version (steps 4 and 5). The context ID has to be passed to both uploads.</p> <p>The instrumented build is optional for uploading, however, it's recommended to upload as it will help to provide traces and insights in case of regression.  </p>"},{"location":"ra/overview/#http-api","title":"HTTP API","text":"<p>Host:         <code>productscience.app</code> Protocol:     <code>HTTPS</code> Content type: <code>application/json</code> Charset:      <code>utf-8</code></p> <p>To access the API endpoints, you must supply your <code>productscience.token</code> from the <code>productscience.properties</code> file as an Authorization header. For instance: </p> <pre><code>Authorization: Bearer {YOUR_TOKEN}\n</code></pre> <p>See all the API endpoints here.</p>"}]}