{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Product Science Documentation Product Science increases product metrics for mobile applications and helps apps work faster by providing insights into key performance issues that impact user experience. Product Science analyzes the code and actual runtime data to pinpoint performance issues. Our AI enables us to do it more efficiently by providing unique insights for data visualizations to help mobile developers to identify the problem right away.","title":"Home"},{"location":"#product-science-documentation","text":"Product Science increases product metrics for mobile applications and helps apps work faster by providing insights into key performance issues that impact user experience. Product Science analyzes the code and actual runtime data to pinpoint performance issues. Our AI enables us to do it more efficiently by providing unique insights for data visualizations to help mobile developers to identify the problem right away.","title":"Product Science Documentation"},{"location":"android/gradle/","text":"Gradle Build Instructions - Android 1. Credentials Product Science shared access credentials ( productscience.properties file) via Bitwarden sent. Please place it in the root directory of your project. Product Science Android plugin is distributed as public GitHub maven package. It's publicly available but requires authentication with github account. Please generate new token with read:packages access and setup gradle.properties in your home directory ~/.gradle/gradle.properties . ~/.gradle/gradle.properties github_user = <Github Account> github_key = <Github Token> 2. Add Product Science maven repository In build.gradle add the maven build info to the repositories for project and subprojects: Groovy Kotlin DSL build.gradle buildscript { repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } dependencies { ... } } allprojects { repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } } build.gradle.kts buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } dependencies { ... } } allprojects { repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } } If the project is configured to prefer settings repositories maven source should be added to settings file: Groovy Kotlin DSL settings.gradle ... dependencyResolutionManagement { repositoriesMode . set ( RepositoriesMode . FAIL_ON_PROJECT_REPOS ) repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } } settings.gradle.kts ... dependencyResolutionManagement { repositoriesMode . set ( RepositoriesMode . FAIL_ON_PROJECT_REPOS ) repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } } In another case, if allprojects is not present in top level build.gradle then add it in the top of the file. 3. Add Product Science plugin to classpath Contact your Sales Engineer to get the Version of the Plugin to replace the VERSIONSUPPLIEDBYPSI with the Version we supply. Groovy Kotlin DSL build.gradle buildscript { repositories { ... } dependencies { classpath \"com.productscience.transformer:transformer-plugin:0.13.1\" classpath \"com.productscience.transformer:transformer-instrumentation:0.13.1\" } } ... build.gradle.kts buildscript { repositories { ... } dependencies { classpath ( \"com.productscience.transformer:transformer-plugin:0.13.1\" ) classpath ( \"com.productscience.transformer:transformer-instrumentation:0.13.1\" ) } } ... Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.apk so our AI can learn how its dynamic instrumentation is performing on the build. 4. Apply the Product Science Plugin Apply plugin to app/build.gradle Groovy Kotlin DSL app/build.gradle plugins { id \"com.android.application\" id \"kotlin-android\" } apply plugin: \"com.productscience.transformer.plugin\" ... app/build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"kotlin-android\" ) id ( \"com.productscience.transformer.plugin\" ) } ... 5. Add Proguard rules If the application uses obfuscation/shrinking add a new ProGuard rule to your project. To achieve it add the next line to the R8/ProGuard configuration file: proguard-rules.pro. -keep class com.productscience.transformer.module.** { *; } Your project may use the other proguard file name. More information about R8/ProGuard configuration can be found here: https://developer.android.com/studio/build/shrink-code 6. Build your app Now you can build your app with Gradle, i.e.: ./gradlew assemble Please label your build with the Plugin Version from above i.e. MyApp_PSi-0.14.2.apk so our AI can learn how its dynamic instrumentation is performing on the build. Enabling the plugin by build type For plugin versions greater than 0.12.1 , you can integrate Product Science pipeline into your gradle build selectively apply the plugin to a given build type by adding a productScience block at the top level of your app/build.gradle file. Inside the proguard block, add a block corresponding to the build type (must have the same name) and set enabled to true . Groovy Kotlin DSL app/build.gradle plugins { id \"com.android.application\" id \"kotlin-android\" } apply plugin: \"com.productscience.transformer.plugin\" productScience { psiRelease { enabled true } } android { ... buildTypes { psiRelease { minifyEnabled true } release { minifyEnabled true } } } app/build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"kotlin-android\" ) id ( \"com.productscience.transformer.plugin\" ) } productScience { create ( \"psiRelease\" ) { isEnabled = true } } android { ... buildTypes { create ( \"psiRelease\" ) { isMinifyEnabled = true } getByName ( \"release\" ) { isMinifyEnabled = true } } } If the productScience block is missing or empty, the plugin will be applied to all build types. If one or more build types appear in the productScience block, the plugin will be applied only to those build types that have enabled set to true.","title":"Build / Gradle"},{"location":"android/gradle/#gradle-build-instructions-android","text":"","title":"Gradle Build Instructions - Android"},{"location":"android/gradle/#1-credentials","text":"Product Science shared access credentials ( productscience.properties file) via Bitwarden sent. Please place it in the root directory of your project. Product Science Android plugin is distributed as public GitHub maven package. It's publicly available but requires authentication with github account. Please generate new token with read:packages access and setup gradle.properties in your home directory ~/.gradle/gradle.properties . ~/.gradle/gradle.properties github_user = <Github Account> github_key = <Github Token>","title":"1. Credentials"},{"location":"android/gradle/#2-add-product-science-maven-repository","text":"In build.gradle add the maven build info to the repositories for project and subprojects: Groovy Kotlin DSL build.gradle buildscript { repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } dependencies { ... } } allprojects { repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } } build.gradle.kts buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } dependencies { ... } } allprojects { repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } } If the project is configured to prefer settings repositories maven source should be added to settings file: Groovy Kotlin DSL settings.gradle ... dependencyResolutionManagement { repositoriesMode . set ( RepositoriesMode . FAIL_ON_PROJECT_REPOS ) repositories { maven { url \"https://maven.pkg.github.com/product-science/PSAndroid\" credentials { username = github_user password = github_key } } } } settings.gradle.kts ... dependencyResolutionManagement { repositoriesMode . set ( RepositoriesMode . FAIL_ON_PROJECT_REPOS ) repositories { maven { url = uri ( \"https://maven.pkg.github.com/product-science/PSAndroid\" ) credentials { username = System . getProperty ( \"github_user\" ) password = System . getProperty ( \"github_key\" ) } } } } In another case, if allprojects is not present in top level build.gradle then add it in the top of the file.","title":"2. Add Product Science maven repository"},{"location":"android/gradle/#3-add-product-science-plugin-to-classpath","text":"Contact your Sales Engineer to get the Version of the Plugin to replace the VERSIONSUPPLIEDBYPSI with the Version we supply. Groovy Kotlin DSL build.gradle buildscript { repositories { ... } dependencies { classpath \"com.productscience.transformer:transformer-plugin:0.13.1\" classpath \"com.productscience.transformer:transformer-instrumentation:0.13.1\" } } ... build.gradle.kts buildscript { repositories { ... } dependencies { classpath ( \"com.productscience.transformer:transformer-plugin:0.13.1\" ) classpath ( \"com.productscience.transformer:transformer-instrumentation:0.13.1\" ) } } ... Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.apk so our AI can learn how its dynamic instrumentation is performing on the build.","title":"3. Add Product Science plugin to classpath"},{"location":"android/gradle/#4-apply-the-product-science-plugin","text":"Apply plugin to app/build.gradle Groovy Kotlin DSL app/build.gradle plugins { id \"com.android.application\" id \"kotlin-android\" } apply plugin: \"com.productscience.transformer.plugin\" ... app/build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"kotlin-android\" ) id ( \"com.productscience.transformer.plugin\" ) } ...","title":"4. Apply the Product Science Plugin"},{"location":"android/gradle/#5-add-proguard-rules","text":"If the application uses obfuscation/shrinking add a new ProGuard rule to your project. To achieve it add the next line to the R8/ProGuard configuration file: proguard-rules.pro. -keep class com.productscience.transformer.module.** { *; } Your project may use the other proguard file name. More information about R8/ProGuard configuration can be found here: https://developer.android.com/studio/build/shrink-code","title":"5. Add Proguard rules"},{"location":"android/gradle/#6-build-your-app","text":"Now you can build your app with Gradle, i.e.: ./gradlew assemble Please label your build with the Plugin Version from above i.e. MyApp_PSi-0.14.2.apk so our AI can learn how its dynamic instrumentation is performing on the build.","title":"6. Build your app"},{"location":"android/gradle/#enabling-the-plugin-by-build-type","text":"For plugin versions greater than 0.12.1 , you can integrate Product Science pipeline into your gradle build selectively apply the plugin to a given build type by adding a productScience block at the top level of your app/build.gradle file. Inside the proguard block, add a block corresponding to the build type (must have the same name) and set enabled to true . Groovy Kotlin DSL app/build.gradle plugins { id \"com.android.application\" id \"kotlin-android\" } apply plugin: \"com.productscience.transformer.plugin\" productScience { psiRelease { enabled true } } android { ... buildTypes { psiRelease { minifyEnabled true } release { minifyEnabled true } } } app/build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"kotlin-android\" ) id ( \"com.productscience.transformer.plugin\" ) } productScience { create ( \"psiRelease\" ) { isEnabled = true } } android { ... buildTypes { create ( \"psiRelease\" ) { isMinifyEnabled = true } getByName ( \"release\" ) { isMinifyEnabled = true } } } If the productScience block is missing or empty, the plugin will be applied to all build types. If one or more build types appear in the productScience block, the plugin will be applied only to those build types that have enabled set to true.","title":"Enabling the plugin by build type"},{"location":"android/user-flow/","text":"Manual Annotation for User Flows In addition to automatically instrumenting your app, the Product Science SDK provides a userflow library that enables manual annotation of user flows in your code. This can be useful for tracking and comparing timing changes between specific events across traces. The steps to add and use the library are below. Dependencies Add the userflow library as a dependency in app/build.gradle dependencies { implementation \"com.productscience.userflow:userflow:0.15.1\" } Annotation Process There are three static methods used to annotate user flows: UserFlow#start UserFlow#custom UserFlow#end Each of these methods take an integer argument (UserFlow ID) and a nullable String argument (comment). 1. Starting a UserFlow To start a UserFlow, call UserFlow#start and pass it an ID and a String message. UserFlow . start ( 1 , \"App start begins\" ) 2. Annotations UserFlow's milestones While a UserFlow is in progress, you can make calls to UserFlow#custom passing the UserFlow ID and a String message. This can be useful to annotate events along the UserFlow (e.g., reaching a milestone or annotating different conditional paths among others). UserFlow . custom ( 1 , \"UserFlow hit milestone\" ) 3. Ending a UserFlow To end a UserFlow, call UserFlow#end passing the ID of the UserFlow to end and a String message. UserFlow . end ( 1 , \"App start complete\" ) Examples UserFlow Annotations on PSTool Sample app There is a sample app demonstrating the use of the userflow library at: https://github.com/product-science/demoapps-private/tree/main/Android/userflow-android-example Project Integration By default, UserFlow Annotations are added to traces only when Product Science plugin is applied. To annotate user flows without applying the plugin, call UserFlow#setAlwaysAnnotate(true) . CAUTION : using this method can enable unwanted annotations in production builds. You will have to take steps to ensure that UserFlow annotations are only called where appropriate.","title":"User Flow Annotation"},{"location":"android/user-flow/#manual-annotation-for-user-flows","text":"In addition to automatically instrumenting your app, the Product Science SDK provides a userflow library that enables manual annotation of user flows in your code. This can be useful for tracking and comparing timing changes between specific events across traces. The steps to add and use the library are below.","title":"Manual Annotation for User Flows"},{"location":"android/user-flow/#dependencies","text":"Add the userflow library as a dependency in app/build.gradle dependencies { implementation \"com.productscience.userflow:userflow:0.15.1\" }","title":"Dependencies"},{"location":"android/user-flow/#annotation-process","text":"There are three static methods used to annotate user flows: UserFlow#start UserFlow#custom UserFlow#end Each of these methods take an integer argument (UserFlow ID) and a nullable String argument (comment).","title":"Annotation Process"},{"location":"android/user-flow/#1-starting-a-userflow","text":"To start a UserFlow, call UserFlow#start and pass it an ID and a String message. UserFlow . start ( 1 , \"App start begins\" )","title":"1. Starting a UserFlow"},{"location":"android/user-flow/#2-annotations-userflows-milestones","text":"While a UserFlow is in progress, you can make calls to UserFlow#custom passing the UserFlow ID and a String message. This can be useful to annotate events along the UserFlow (e.g., reaching a milestone or annotating different conditional paths among others). UserFlow . custom ( 1 , \"UserFlow hit milestone\" )","title":"2. Annotations UserFlow's milestones"},{"location":"android/user-flow/#3-ending-a-userflow","text":"To end a UserFlow, call UserFlow#end passing the ID of the UserFlow to end and a String message. UserFlow . end ( 1 , \"App start complete\" )","title":"3. Ending a UserFlow"},{"location":"android/user-flow/#examples","text":"","title":"Examples"},{"location":"android/user-flow/#userflow-annotations-on-pstool","text":"","title":"UserFlow Annotations on PSTool"},{"location":"android/user-flow/#sample-app","text":"There is a sample app demonstrating the use of the userflow library at: https://github.com/product-science/demoapps-private/tree/main/Android/userflow-android-example","title":"Sample app"},{"location":"android/user-flow/#project-integration","text":"By default, UserFlow Annotations are added to traces only when Product Science plugin is applied. To annotate user flows without applying the plugin, call UserFlow#setAlwaysAnnotate(true) . CAUTION : using this method can enable unwanted annotations in production builds. You will have to take steps to ensure that UserFlow annotations are only called where appropriate.","title":"Project Integration"},{"location":"ios/xcode/","text":"iOS Build Instructions - Xcode 1. Key Generation Methodology- PSi: Generates a token (key) via GitHub Saves key in Bitwarden credential storage Shares token with Bitwarden Send Keys have an expiration date 2. Configure productscience.yaml Set up productscience.yaml in the Xcode app project directory: productscience.github.config: <supplied-by-PSi> productscience.github.token: <supplied-by-PSi> productscience.token: <supplied-by-PSi> example productscience.yaml : productscience.github.config: product-science-configs:ios-template-configs:config.yaml:main productscience.github.token: ghp_XXXXXXXXXXXXXXX productscience.token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXX 3. Configure and Test xcodebuild Prepare an xcodebuild command to build the app in terminal. For projects that are organized with xcworkspace : xcodebuild \\ -workspace MyApp.xcworkspace \\ -scheme MyAppScheme \\ -sdk iphoneos For xcodeproj based projects: xcodebuild \\ -project MyApp.xcodeproj \\ -scheme MyAppScheme \\ -sdk iphoneos Ensure that your app can build successfully before using the PSCliCodeInjector . A reference example using the Firefox Fennec iOS app is shown below. 4. Install PSTools Instrumentation Injection Kit You will need to use the github credentials supplied by PSi to above to follow these steps: Download the lastest PSTools-PLATFORM.zip from this link and unzip it Install PSTools/PSCliCodeInjector.pkg on your Mac with double-click Copy PSTools/PSKit to ps-workdir i.e. cp -r PSTools/PSKit . See the Firefox example below for sample final directory structure. Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.ipa so our AI can learn how its dynamic instrumentation is performing on the build. 5. Build Run PSTool code transformation and configuration fine-tuning: PSCliCodeInjector MyApp \\ --backup-dir MyApp-BACKUP \\ --sub-folders = . \\ --console-build-command = \"<BUILD-COMMAND-FROM_STEP-3>\" This step transforms the code of the MyApp . A backup of the original will be in MyApp-BACKUP . The BUILD-COMMAND-FROM_STEP-2 is the choice between the xcworkspace or xcodeproj methods and their associated flags. These are examples of xcodebuild templates- yours may differ. See the Firefox app example below. \u26a0\ufe0f Warning: PSCliCodeInjector parses the command\u2019s output to identify issues with the injected code. Be sure not to pipe the build\u2019s results through tools like xcbeautify, xcpretty, etc. or this logic might not work correctly. When complete, the MyApp directory will have been transformed. Use this directory for your build. Open project from MyApp directory Build and export the app in your default pipeline. Send us MyApp/psfilter.txt if it exists Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.ipa so our AI can learn how its dynamic instrumentation is performing on the build. Example: Firefox for iOS 1. Clone Firefox iOS repo git clone https://github.com/mozilla-mobile/firefox-ios 2. Configure and test xcodebuild In the firefox-ios directory xcodebuild \\ -project Client.xcodeproj \\ -scheme Fennec \\ -destination 'name=iPhone 13 mini' \\ -sdk iphoneos Note this example uses iPhone 13 mini as the example destination- this can be changed. 3. Create Creds and install PStools Create the productscience.yaml file in the firefox-ios directory as shown in Step 2 above. Download, unzip, and install PStools as shown in Step 4 above. Make sure that the PSKit is in the same top level directory level as firefox-ios : cp -r PSTools/PSKit . i.e. drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios 4. Build with PSCliCodeInjector This is done in the same directory level as the firefox-ios directory i.e. the same one as shown above- NOT IN the firefox-ios directory: drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios PSCliCodeInjector firefox-ios --backup-dir firefox-ios-BACKUP \\ --sub-folders = . \\ --console-build-command = \\ \"xcodebuild \\ -project Client.xcodeproj \\ -scheme Fennec \\ -destination 'name=iPhone 13 mini' \\ -sdk iphoneos\" When complete, the firefox-ios directory will have been transformed. firefox-ios-BACKUP is a directory with original project. drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios drwxr-xr-x 77 user staff 2464 Jul 12 16 :46 firefox-ios-BACKUP Use firefox-ios for your pipeline or Xcode.","title":"Build / Xcode"},{"location":"ios/xcode/#ios-build-instructions-xcode","text":"","title":"iOS Build Instructions - Xcode"},{"location":"ios/xcode/#1-key-generation-methodology-psi","text":"Generates a token (key) via GitHub Saves key in Bitwarden credential storage Shares token with Bitwarden Send Keys have an expiration date","title":"1. Key Generation Methodology- PSi:"},{"location":"ios/xcode/#2-configure-productscienceyaml","text":"Set up productscience.yaml in the Xcode app project directory: productscience.github.config: <supplied-by-PSi> productscience.github.token: <supplied-by-PSi> productscience.token: <supplied-by-PSi> example productscience.yaml : productscience.github.config: product-science-configs:ios-template-configs:config.yaml:main productscience.github.token: ghp_XXXXXXXXXXXXXXX productscience.token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXX","title":"2. Configure productscience.yaml"},{"location":"ios/xcode/#3-configure-and-test-xcodebuild","text":"Prepare an xcodebuild command to build the app in terminal. For projects that are organized with xcworkspace : xcodebuild \\ -workspace MyApp.xcworkspace \\ -scheme MyAppScheme \\ -sdk iphoneos For xcodeproj based projects: xcodebuild \\ -project MyApp.xcodeproj \\ -scheme MyAppScheme \\ -sdk iphoneos Ensure that your app can build successfully before using the PSCliCodeInjector . A reference example using the Firefox Fennec iOS app is shown below.","title":"3. Configure and Test xcodebuild"},{"location":"ios/xcode/#4-install-pstools-instrumentation-injection-kit","text":"You will need to use the github credentials supplied by PSi to above to follow these steps: Download the lastest PSTools-PLATFORM.zip from this link and unzip it Install PSTools/PSCliCodeInjector.pkg on your Mac with double-click Copy PSTools/PSKit to ps-workdir i.e. cp -r PSTools/PSKit . See the Firefox example below for sample final directory structure. Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.ipa so our AI can learn how its dynamic instrumentation is performing on the build.","title":"4. Install PSTools Instrumentation Injection Kit"},{"location":"ios/xcode/#5-build","text":"Run PSTool code transformation and configuration fine-tuning: PSCliCodeInjector MyApp \\ --backup-dir MyApp-BACKUP \\ --sub-folders = . \\ --console-build-command = \"<BUILD-COMMAND-FROM_STEP-3>\" This step transforms the code of the MyApp . A backup of the original will be in MyApp-BACKUP . The BUILD-COMMAND-FROM_STEP-2 is the choice between the xcworkspace or xcodeproj methods and their associated flags. These are examples of xcodebuild templates- yours may differ. See the Firefox app example below. \u26a0\ufe0f Warning: PSCliCodeInjector parses the command\u2019s output to identify issues with the injected code. Be sure not to pipe the build\u2019s results through tools like xcbeautify, xcpretty, etc. or this logic might not work correctly. When complete, the MyApp directory will have been transformed. Use this directory for your build. Open project from MyApp directory Build and export the app in your default pipeline. Send us MyApp/psfilter.txt if it exists Please label your build with the PSi Plugin Version from above i.e. MyAppPSi0.9.1.ipa so our AI can learn how its dynamic instrumentation is performing on the build.","title":"5. Build"},{"location":"ios/xcode/#example-firefox-for-ios","text":"","title":"Example: Firefox for iOS"},{"location":"ios/xcode/#1-clone-firefox-ios-repo","text":"git clone https://github.com/mozilla-mobile/firefox-ios","title":"1. Clone Firefox iOS repo"},{"location":"ios/xcode/#2-configure-and-test-xcodebuild","text":"In the firefox-ios directory xcodebuild \\ -project Client.xcodeproj \\ -scheme Fennec \\ -destination 'name=iPhone 13 mini' \\ -sdk iphoneos Note this example uses iPhone 13 mini as the example destination- this can be changed.","title":"2. Configure and test xcodebuild"},{"location":"ios/xcode/#3-create-creds-and-install-pstools","text":"Create the productscience.yaml file in the firefox-ios directory as shown in Step 2 above. Download, unzip, and install PStools as shown in Step 4 above. Make sure that the PSKit is in the same top level directory level as firefox-ios : cp -r PSTools/PSKit . i.e. drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios","title":"3. Create Creds and install PStools"},{"location":"ios/xcode/#4-build-with-psclicodeinjector","text":"This is done in the same directory level as the firefox-ios directory i.e. the same one as shown above- NOT IN the firefox-ios directory: drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios PSCliCodeInjector firefox-ios --backup-dir firefox-ios-BACKUP \\ --sub-folders = . \\ --console-build-command = \\ \"xcodebuild \\ -project Client.xcodeproj \\ -scheme Fennec \\ -destination 'name=iPhone 13 mini' \\ -sdk iphoneos\" When complete, the firefox-ios directory will have been transformed. firefox-ios-BACKUP is a directory with original project. drwxr-xr-x@ 5 user staff 160 Jul 12 16 :24 PSKit drwxr-xr-x@ 6 user staff 192 Jul 5 10 :22 PSTools drwxr-xr-x 76 user staff 2432 Jul 12 16 :26 firefox-ios drwxr-xr-x 77 user staff 2464 Jul 12 16 :46 firefox-ios-BACKUP Use firefox-ios for your pipeline or Xcode.","title":"4. Build with PSCliCodeInjector"}]}